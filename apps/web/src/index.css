/*! tailwindcss v4.1.3 | MIT License | https://tailwindcss.com */
@layer properties {
  @supports (((-webkit-hyphens: none)) and (not (margin-trim: inline))) or ((-moz-orient: inline) and (not (color: rgb(from red r g b)))) {
    *, :before, :after, ::backdrop {
      --tw-translate-x: 0;
      --tw-translate-y: 0;
      --tw-translate-z: 0;
      --tw-rotate-x: rotateX(0);
      --tw-rotate-y: rotateY(0);
      --tw-rotate-z: rotateZ(0);
      --tw-skew-x: skewX(0);
      --tw-skew-y: skewY(0);
      --tw-space-y-reverse: 0;
      --tw-border-style: solid;
      --tw-gradient-position: initial;
      --tw-gradient-from: #0000;
      --tw-gradient-via: #0000;
      --tw-gradient-to: #0000;
      --tw-gradient-stops: initial;
      --tw-gradient-via-stops: initial;
      --tw-gradient-from-position: 0%;
      --tw-gradient-via-position: 50%;
      --tw-gradient-to-position: 100%;
      --tw-leading: initial;
      --tw-font-weight: initial;
      --tw-tracking: initial;
      --tw-shadow: 0 0 #0000;
      --tw-shadow-color: initial;
      --tw-shadow-alpha: 100%;
      --tw-inset-shadow: 0 0 #0000;
      --tw-inset-shadow-color: initial;
      --tw-inset-shadow-alpha: 100%;
      --tw-ring-color: initial;
      --tw-ring-shadow: 0 0 #0000;
      --tw-inset-ring-color: initial;
      --tw-inset-ring-shadow: 0 0 #0000;
      --tw-ring-inset: initial;
      --tw-ring-offset-width: 0px;
      --tw-ring-offset-color: #fff;
      --tw-ring-offset-shadow: 0 0 #0000;
      --tw-outline-style: solid;
      --tw-blur: initial;
      --tw-brightness: initial;
      --tw-contrast: initial;
      --tw-grayscale: initial;
      --tw-hue-rotate: initial;
      --tw-invert: initial;
      --tw-opacity: initial;
      --tw-saturate: initial;
      --tw-sepia: initial;
      --tw-drop-shadow: initial;
      --tw-drop-shadow-color: initial;
      --tw-drop-shadow-alpha: 100%;
      --tw-drop-shadow-size: initial;
      --tw-duration: initial;
      --tw-ease: initial;
      --tw-scale-x: 1;
      --tw-scale-y: 1;
      --tw-scale-z: 1;
    }
  }
}

@layer theme {
  :root, :host {
    --font-sans: ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
    --font-mono: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
    --color-red-500: oklch(.637 .237 25.331);
    --color-orange-50: oklch(.98 .016 73.684);
    --color-orange-400: oklch(.75 .183 55.934);
    --color-orange-500: oklch(.705 .213 47.604);
    --color-orange-600: oklch(.646 .222 41.116);
    --color-yellow-400: oklch(.852 .199 91.936);
    --color-yellow-500: oklch(.795 .184 86.047);
    --color-yellow-600: oklch(.681 .162 75.834);
    --color-green-50: oklch(.982 .018 155.826);
    --color-green-400: oklch(.792 .209 151.711);
    --color-green-500: oklch(.723 .219 149.579);
    --color-green-600: oklch(.627 .194 149.214);
    --color-blue-50: oklch(.97 .014 254.604);
    --color-blue-100: oklch(.932 .032 255.585);
    --color-blue-200: oklch(.882 .059 254.128);
    --color-blue-400: oklch(.707 .165 254.624);
    --color-blue-500: oklch(.623 .214 259.815);
    --color-blue-600: oklch(.546 .245 262.881);
    --color-blue-700: oklch(.488 .243 264.376);
    --color-blue-900: oklch(.379 .146 265.522);
    --color-purple-50: oklch(.977 .014 308.299);
    --color-gray-50: oklch(.985 .002 247.839);
    --color-gray-100: oklch(.967 .003 264.542);
    --color-gray-200: oklch(.928 .006 264.531);
    --color-gray-300: oklch(.872 .01 258.338);
    --color-gray-400: oklch(.707 .022 261.325);
    --color-gray-500: oklch(.551 .027 264.364);
    --color-gray-600: oklch(.446 .03 256.802);
    --color-gray-700: oklch(.373 .034 259.733);
    --color-gray-800: oklch(.278 .033 256.848);
    --color-gray-900: oklch(.21 .034 264.665);
    --color-black: #000;
    --color-white: #fff;
    --spacing: .25rem;
    --container-sm: 24rem;
    --container-md: 28rem;
    --container-lg: 32rem;
    --container-4xl: 56rem;
    --text-xs: .75rem;
    --text-xs--line-height: calc(1 / .75);
    --text-sm: .875rem;
    --text-sm--line-height: calc(1.25 / .875);
    --text-base: 1rem;
    --text-base--line-height: calc(1.5 / 1);
    --text-lg: 1.125rem;
    --text-lg--line-height: calc(1.75 / 1.125);
    --text-xl: 1.25rem;
    --text-xl--line-height: calc(1.75 / 1.25);
    --text-2xl: 1.5rem;
    --font-weight-normal: 400;
    --font-weight-medium: 500;
    --font-weight-semibold: 600;
    --tracking-widest: .1em;
    --radius-xs: .125rem;
    --ease-in-out: cubic-bezier(.4, 0, .2, 1);
    --animate-spin: spin 1s linear infinite;
    --default-transition-duration: .15s;
    --default-transition-timing-function: cubic-bezier(.4, 0, .2, 1);
    --default-font-family: var(--font-sans);
    --default-font-feature-settings: var(--font-sans--font-feature-settings);
    --default-font-variation-settings: var(--font-sans--font-variation-settings);
    --default-mono-font-family: var(--font-mono);
    --default-mono-font-feature-settings: var(--font-mono--font-feature-settings);
    --default-mono-font-variation-settings: var(--font-mono--font-variation-settings);
  }
}

@layer base {
  *, :after, :before, ::backdrop {
    box-sizing: border-box;
    border: 0 solid;
    margin: 0;
    padding: 0;
  }

  ::file-selector-button {
    box-sizing: border-box;
    border: 0 solid;
    margin: 0;
    padding: 0;
  }

  html, :host {
    -webkit-text-size-adjust: 100%;
    tab-size: 4;
    line-height: 1.5;
    font-family: var(--default-font-family, ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji");
    font-feature-settings: var(--default-font-feature-settings, normal);
    font-variation-settings: var(--default-font-variation-settings, normal);
    -webkit-tap-highlight-color: transparent;
  }

  body {
    line-height: inherit;
  }

  hr {
    height: 0;
    color: inherit;
    border-top-width: 1px;
  }

  abbr:where([title]) {
    -webkit-text-decoration: underline dotted;
    text-decoration: underline dotted;
  }

  h1, h2, h3, h4, h5, h6 {
    font-size: inherit;
    font-weight: inherit;
  }

  a {
    color: inherit;
    -webkit-text-decoration: inherit;
    -webkit-text-decoration: inherit;
    text-decoration: inherit;
  }

  b, strong {
    font-weight: bolder;
  }

  code, kbd, samp, pre {
    font-family: var(--default-mono-font-family, ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace);
    font-feature-settings: var(--default-mono-font-feature-settings, normal);
    font-variation-settings: var(--default-mono-font-variation-settings, normal);
    font-size: 1em;
  }

  small {
    font-size: 80%;
  }

  sub, sup {
    vertical-align: baseline;
    font-size: 75%;
    line-height: 0;
    position: relative;
  }

  sub {
    bottom: -.25em;
  }

  sup {
    top: -.5em;
  }

  table {
    text-indent: 0;
    border-color: inherit;
    border-collapse: collapse;
  }

  :-moz-focusring {
    outline: auto;
  }

  progress {
    vertical-align: baseline;
  }

  summary {
    display: list-item;
  }

  ol, ul, menu {
    list-style: none;
  }

  img, svg, video, canvas, audio, iframe, embed, object {
    vertical-align: middle;
    display: block;
  }

  img, video {
    max-width: 100%;
    height: auto;
  }

  button, input, select, optgroup, textarea {
    font: inherit;
    font-feature-settings: inherit;
    font-variation-settings: inherit;
    letter-spacing: inherit;
    color: inherit;
    opacity: 1;
    background-color: #0000;
    border-radius: 0;
  }

  ::file-selector-button {
    font: inherit;
    font-feature-settings: inherit;
    font-variation-settings: inherit;
    letter-spacing: inherit;
    color: inherit;
    opacity: 1;
    background-color: #0000;
    border-radius: 0;
  }

  :where(select:is([multiple], [size])) optgroup {
    font-weight: bolder;
  }

  :where(select:is([multiple], [size])) optgroup option {
    padding-inline-start: 20px;
  }

  ::file-selector-button {
    margin-inline-end: 4px;
  }

  ::placeholder {
    opacity: 1;
    color: currentColor;
  }

  @supports (color: color-mix(in lab, red, red)) {
    ::placeholder {
      color: color-mix(in oklab, currentColor 50%, transparent);
    }
  }

  textarea {
    resize: vertical;
  }

  ::-webkit-search-decoration {
    -webkit-appearance: none;
  }

  ::-webkit-date-and-time-value {
    min-height: 1lh;
    text-align: inherit;
  }

  ::-webkit-datetime-edit {
    display: inline-flex;
  }

  ::-webkit-datetime-edit-fields-wrapper {
    padding: 0;
  }

  ::-webkit-datetime-edit {
    padding-block: 0;
  }

  ::-webkit-datetime-edit-year-field {
    padding-block: 0;
  }

  ::-webkit-datetime-edit-month-field {
    padding-block: 0;
  }

  ::-webkit-datetime-edit-day-field {
    padding-block: 0;
  }

  ::-webkit-datetime-edit-hour-field {
    padding-block: 0;
  }

  ::-webkit-datetime-edit-minute-field {
    padding-block: 0;
  }

  ::-webkit-datetime-edit-second-field {
    padding-block: 0;
  }

  ::-webkit-datetime-edit-millisecond-field {
    padding-block: 0;
  }

  ::-webkit-datetime-edit-meridiem-field {
    padding-block: 0;
  }

  :-moz-ui-invalid {
    box-shadow: none;
  }

  button, input:where([type="button"], [type="reset"], [type="submit"]) {
    appearance: button;
  }

  ::file-selector-button {
    appearance: button;
  }

  ::-webkit-inner-spin-button {
    height: auto;
  }

  ::-webkit-outer-spin-button {
    height: auto;
  }

  [hidden]:where(:not([hidden="until-found"])) {
    display: none !important;
  }

  * {
    border-color: var(--border);
    outline-color: var(--ring);
  }

  @supports (color: color-mix(in lab, red, red)) {
    * {
      outline-color: color-mix(in oklab, var(--ring) 50%, transparent);
    }
  }

  * {
    border-color: var(--border);
    outline-color: var(--ring);
  }

  @supports (color: color-mix(in lab, red, red)) {
    * {
      outline-color: color-mix(in oklab, var(--ring) 50%, transparent);
    }
  }

  body {
    background-color: var(--background);
    color: var(--foreground);
  }

  :where(:not(:has([class*=" text-"]), :not(:has([class^="text-"])))) h1 {
    font-size: var(--text-2xl);
    font-weight: var(--font-weight-medium);
    line-height: 1.5;
  }

  :where(:not(:has([class*=" text-"]), :not(:has([class^="text-"])))) h2 {
    font-size: var(--text-xl);
    font-weight: var(--font-weight-medium);
    line-height: 1.5;
  }

  :where(:not(:has([class*=" text-"]), :not(:has([class^="text-"])))) h3 {
    font-size: var(--text-lg);
    font-weight: var(--font-weight-medium);
    line-height: 1.5;
  }

  :where(:not(:has([class*=" text-"]), :not(:has([class^="text-"])))) h4 {
    font-size: var(--text-base);
    font-weight: var(--font-weight-medium);
    line-height: 1.5;
  }

  :where(:not(:has([class*=" text-"]), :not(:has([class^="text-"])))) p {
    font-size: var(--text-base);
    font-weight: var(--font-weight-normal);
    line-height: 1.5;
  }

  :where(:not(:has([class*=" text-"]), :not(:has([class^="text-"])))) label, :where(:not(:has([class*=" text-"]), :not(:has([class^="text-"])))) button {
    font-size: var(--text-base);
    font-weight: var(--font-weight-medium);
    line-height: 1.5;
  }

  :where(:not(:has([class*=" text-"]), :not(:has([class^="text-"])))) input {
    font-size: var(--text-base);
    font-weight: var(--font-weight-normal);
    line-height: 1.5;
  }
}

@layer utilities {
  .\@container\/card-header {
    container: card-header / inline-size;
  }

  .pointer-events-none {
    pointer-events: none;
  }

  .sr-only {
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
    width: 1px;
    height: 1px;
    margin: -1px;
    padding: 0;
    position: absolute;
    overflow: hidden;
  }

  .absolute {
    position: absolute;
  }

  .fixed {
    position: fixed;
  }

  .relative {
    position: relative;
  }

  .sticky {
    position: sticky;
  }

  .inset-0 {
    inset: calc(var(--spacing) * 0);
  }

  .inset-x-0 {
    inset-inline: calc(var(--spacing) * 0);
  }

  .inset-y-0 {
    inset-block: calc(var(--spacing) * 0);
  }

  .top-0 {
    top: calc(var(--spacing) * 0);
  }

  .top-1\/2 {
    top: 50%;
  }

  .top-1\/3 {
    top: 33.3333%;
  }

  .top-2 {
    top: calc(var(--spacing) * 2);
  }

  .top-4 {
    top: calc(var(--spacing) * 4);
  }

  .top-\[50\%\] {
    top: 50%;
  }

  .right-0 {
    right: calc(var(--spacing) * 0);
  }

  .right-1 {
    right: calc(var(--spacing) * 1);
  }

  .right-1\/3 {
    right: 33.3333%;
  }

  .right-2 {
    right: calc(var(--spacing) * 2);
  }

  .right-3 {
    right: calc(var(--spacing) * 3);
  }

  .right-4 {
    right: calc(var(--spacing) * 4);
  }

  .bottom-0 {
    bottom: calc(var(--spacing) * 0);
  }

  .left-0 {
    left: calc(var(--spacing) * 0);
  }

  .left-1 {
    left: calc(var(--spacing) * 1);
  }

  .left-1\/2 {
    left: 50%;
  }

  .left-1\/4 {
    left: 25%;
  }

  .left-2 {
    left: calc(var(--spacing) * 2);
  }

  .left-3 {
    left: calc(var(--spacing) * 3);
  }

  .left-\[50\%\] {
    left: 50%;
  }

  .z-10 {
    z-index: 10;
  }

  .z-20 {
    z-index: 20;
  }

  .z-50 {
    z-index: 50;
  }

  .col-start-2 {
    grid-column-start: 2;
  }

  .row-span-2 {
    grid-row: span 2 / span 2;
  }

  .row-start-1 {
    grid-row-start: 1;
  }

  .container {
    width: 100%;
  }

  @media (width >= 40rem) {
    .container {
      max-width: 40rem;
    }
  }

  @media (width >= 48rem) {
    .container {
      max-width: 48rem;
    }
  }

  @media (width >= 64rem) {
    .container {
      max-width: 64rem;
    }
  }

  @media (width >= 80rem) {
    .container {
      max-width: 80rem;
    }
  }

  @media (width >= 96rem) {
    .container {
      max-width: 96rem;
    }
  }

  .m-0 {
    margin: calc(var(--spacing) * 0);
  }

  .-mx-1 {
    margin-inline: calc(var(--spacing) * -1);
  }

  .mx-auto {
    margin-inline: auto;
  }

  .my-1 {
    margin-block: calc(var(--spacing) * 1);
  }

  .mt-4 {
    margin-top: calc(var(--spacing) * 4);
  }

  .mt-6 {
    margin-top: calc(var(--spacing) * 6);
  }

  .mt-auto {
    margin-top: auto;
  }

  .mr-1 {
    margin-right: calc(var(--spacing) * 1);
  }

  .mb-1 {
    margin-bottom: calc(var(--spacing) * 1);
  }

  .mb-2 {
    margin-bottom: calc(var(--spacing) * 2);
  }

  .mb-3 {
    margin-bottom: calc(var(--spacing) * 3);
  }

  .mb-4 {
    margin-bottom: calc(var(--spacing) * 4);
  }

  .mb-6 {
    margin-bottom: calc(var(--spacing) * 6);
  }

  .ml-1 {
    margin-left: calc(var(--spacing) * 1);
  }

  .ml-auto {
    margin-left: auto;
  }

  .block {
    display: block;
  }

  .flex {
    display: flex;
  }

  .grid {
    display: grid;
  }

  .hidden {
    display: none;
  }

  .inline-flex {
    display: inline-flex;
  }

  .field-sizing-content {
    field-sizing: content;
  }

  .aspect-square {
    aspect-ratio: 1;
  }

  .size-2 {
    width: calc(var(--spacing) * 2);
    height: calc(var(--spacing) * 2);
  }

  .size-3\.5 {
    width: calc(var(--spacing) * 3.5);
    height: calc(var(--spacing) * 3.5);
  }

  .size-4 {
    width: calc(var(--spacing) * 4);
    height: calc(var(--spacing) * 4);
  }

  .size-9 {
    width: calc(var(--spacing) * 9);
    height: calc(var(--spacing) * 9);
  }

  .size-10 {
    width: calc(var(--spacing) * 10);
    height: calc(var(--spacing) * 10);
  }

  .size-full {
    width: 100%;
    height: 100%;
  }

  .h-2\/3 {
    height: 66.6667%;
  }

  .h-3 {
    height: calc(var(--spacing) * 3);
  }

  .h-4 {
    height: calc(var(--spacing) * 4);
  }

  .h-5 {
    height: calc(var(--spacing) * 5);
  }

  .h-6 {
    height: calc(var(--spacing) * 6);
  }

  .h-7 {
    height: calc(var(--spacing) * 7);
  }

  .h-8 {
    height: calc(var(--spacing) * 8);
  }

  .h-9 {
    height: calc(var(--spacing) * 9);
  }

  .h-10 {
    height: calc(var(--spacing) * 10);
  }

  .h-12 {
    height: calc(var(--spacing) * 12);
  }

  .h-16 {
    height: calc(var(--spacing) * 16);
  }

  .h-48 {
    height: calc(var(--spacing) * 48);
  }

  .h-\[calc\(100\%-1px\)\] {
    height: calc(100% - 1px);
  }

  .h-\[calc\(100vh-120px\)\] {
    height: calc(100vh - 120px);
  }

  .h-\[var\(--radix-select-trigger-height\)\] {
    height: var(--radix-select-trigger-height);
  }

  .h-auto {
    height: auto;
  }

  .h-full {
    height: 100%;
  }

  .h-px {
    height: 1px;
  }

  .h-screen {
    height: 100vh;
  }

  .max-h-\(--radix-dropdown-menu-content-available-height\) {
    max-height: var(--radix-dropdown-menu-content-available-height);
  }

  .max-h-\(--radix-select-content-available-height\) {
    max-height: var(--radix-select-content-available-height);
  }

  .min-h-16 {
    min-height: calc(var(--spacing) * 16);
  }

  .w-2\/3 {
    width: 66.6667%;
  }

  .w-3 {
    width: calc(var(--spacing) * 3);
  }

  .w-3\/4 {
    width: 75%;
  }

  .w-4 {
    width: calc(var(--spacing) * 4);
  }

  .w-5 {
    width: calc(var(--spacing) * 5);
  }

  .w-6 {
    width: calc(var(--spacing) * 6);
  }

  .w-7 {
    width: calc(var(--spacing) * 7);
  }

  .w-8 {
    width: calc(var(--spacing) * 8);
  }

  .w-10 {
    width: calc(var(--spacing) * 10);
  }

  .w-12 {
    width: calc(var(--spacing) * 12);
  }

  .w-16 {
    width: calc(var(--spacing) * 16);
  }

  .w-40 {
    width: calc(var(--spacing) * 40);
  }

  .w-fit {
    width: fit-content;
  }

  .w-full {
    width: 100%;
  }

  .max-w-4xl {
    max-width: var(--container-4xl);
  }

  .max-w-\[calc\(100\%-2rem\)\] {
    max-width: calc(100% - 2rem);
  }

  .max-w-sm {
    max-width: var(--container-sm);
  }

  .min-w-0 {
    min-width: calc(var(--spacing) * 0);
  }

  .min-w-\[8rem\] {
    min-width: 8rem;
  }

  .min-w-\[var\(--radix-select-trigger-width\)\] {
    min-width: var(--radix-select-trigger-width);
  }

  .flex-1 {
    flex: 1;
  }

  .shrink-0 {
    flex-shrink: 0;
  }

  .grow {
    flex-grow: 1;
  }

  .origin-\(--radix-dropdown-menu-content-transform-origin\) {
    transform-origin: var(--radix-dropdown-menu-content-transform-origin);
  }

  .origin-\(--radix-select-content-transform-origin\) {
    transform-origin: var(--radix-select-content-transform-origin);
  }

  .-translate-x-1\/2 {
    --tw-translate-x: calc(calc(1 / 2 * 100%) * -1);
    translate: var(--tw-translate-x) var(--tw-translate-y);
  }

  .translate-x-\[-50\%\] {
    --tw-translate-x: -50%;
    translate: var(--tw-translate-x) var(--tw-translate-y);
  }

  .-translate-y-1\/2 {
    --tw-translate-y: calc(calc(1 / 2 * 100%) * -1);
    translate: var(--tw-translate-x) var(--tw-translate-y);
  }

  .translate-y-\[-50\%\] {
    --tw-translate-y: -50%;
    translate: var(--tw-translate-x) var(--tw-translate-y);
  }

  .transform {
    transform: var(--tw-rotate-x) var(--tw-rotate-y) var(--tw-rotate-z) var(--tw-skew-x) var(--tw-skew-y);
  }

  .animate-spin {
    animation: var(--animate-spin);
  }

  .cursor-default {
    cursor: default;
  }

  .cursor-pointer {
    cursor: pointer;
  }

  .touch-none {
    touch-action: none;
  }

  .resize-none {
    resize: none;
  }

  .scroll-my-1 {
    scroll-margin-block: calc(var(--spacing) * 1);
  }

  .auto-rows-min {
    grid-auto-rows: min-content;
  }

  .grid-cols-2 {
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }

  .grid-cols-3 {
    grid-template-columns: repeat(3, minmax(0, 1fr));
  }

  .grid-cols-4 {
    grid-template-columns: repeat(4, minmax(0, 1fr));
  }

  .grid-rows-\[auto_auto\] {
    grid-template-rows: auto auto;
  }

  .flex-col {
    flex-direction: column;
  }

  .flex-col-reverse {
    flex-direction: column-reverse;
  }

  .flex-wrap {
    flex-wrap: wrap;
  }

  .items-center {
    align-items: center;
  }

  .items-start {
    align-items: flex-start;
  }

  .justify-between {
    justify-content: space-between;
  }

  .justify-center {
    justify-content: center;
  }

  .gap-1 {
    gap: calc(var(--spacing) * 1);
  }

  .gap-1\.5 {
    gap: calc(var(--spacing) * 1.5);
  }

  .gap-2 {
    gap: calc(var(--spacing) * 2);
  }

  .gap-3 {
    gap: calc(var(--spacing) * 3);
  }

  .gap-4 {
    gap: calc(var(--spacing) * 4);
  }

  .gap-6 {
    gap: calc(var(--spacing) * 6);
  }

  :where(.space-y-1 > :not(:last-child)) {
    --tw-space-y-reverse: 0;
    margin-block-start: calc(calc(var(--spacing) * 1) * var(--tw-space-y-reverse));
    margin-block-end: calc(calc(var(--spacing) * 1) * calc(1 - var(--tw-space-y-reverse)));
  }

  :where(.space-y-2 > :not(:last-child)) {
    --tw-space-y-reverse: 0;
    margin-block-start: calc(calc(var(--spacing) * 2) * var(--tw-space-y-reverse));
    margin-block-end: calc(calc(var(--spacing) * 2) * calc(1 - var(--tw-space-y-reverse)));
  }

  :where(.space-y-3 > :not(:last-child)) {
    --tw-space-y-reverse: 0;
    margin-block-start: calc(calc(var(--spacing) * 3) * var(--tw-space-y-reverse));
    margin-block-end: calc(calc(var(--spacing) * 3) * calc(1 - var(--tw-space-y-reverse)));
  }

  :where(.space-y-4 > :not(:last-child)) {
    --tw-space-y-reverse: 0;
    margin-block-start: calc(calc(var(--spacing) * 4) * var(--tw-space-y-reverse));
    margin-block-end: calc(calc(var(--spacing) * 4) * calc(1 - var(--tw-space-y-reverse)));
  }

  :where(.space-y-6 > :not(:last-child)) {
    --tw-space-y-reverse: 0;
    margin-block-start: calc(calc(var(--spacing) * 6) * var(--tw-space-y-reverse));
    margin-block-end: calc(calc(var(--spacing) * 6) * calc(1 - var(--tw-space-y-reverse)));
  }

  .self-start {
    align-self: flex-start;
  }

  .justify-self-end {
    justify-self: flex-end;
  }

  .overflow-hidden {
    overflow: hidden;
  }

  .overflow-x-hidden {
    overflow-x: hidden;
  }

  .overflow-y-auto {
    overflow-y: auto;
  }

  .rounded {
    border-radius: .25rem;
  }

  .rounded-\[4px\] {
    border-radius: 4px;
  }

  .rounded-full {
    border-radius: 3.40282e38px;
  }

  .rounded-lg {
    border-radius: var(--radius);
  }

  .rounded-md {
    border-radius: calc(var(--radius)  - 2px);
  }

  .rounded-none {
    border-radius: 0;
  }

  .rounded-sm {
    border-radius: calc(var(--radius)  - 4px);
  }

  .rounded-xl {
    border-radius: calc(var(--radius)  + 4px);
  }

  .rounded-xs {
    border-radius: var(--radius-xs);
  }

  .border {
    border-style: var(--tw-border-style);
    border-width: 1px;
  }

  .border-2 {
    border-style: var(--tw-border-style);
    border-width: 2px;
  }

  .border-4 {
    border-style: var(--tw-border-style);
    border-width: 4px;
  }

  .border-t {
    border-top-style: var(--tw-border-style);
    border-top-width: 1px;
  }

  .border-r {
    border-right-style: var(--tw-border-style);
    border-right-width: 1px;
  }

  .border-b {
    border-bottom-style: var(--tw-border-style);
    border-bottom-width: 1px;
  }

  .border-l {
    border-left-style: var(--tw-border-style);
    border-left-width: 1px;
  }

  .border-dashed {
    --tw-border-style: dashed;
    border-style: dashed;
  }

  .border-gray-200 {
    border-color: var(--color-gray-200);
  }

  .border-gray-300 {
    border-color: var(--color-gray-300);
  }

  .border-input {
    border-color: var(--input);
  }

  .border-primary {
    border-color: var(--primary);
  }

  .border-transparent {
    border-color: #0000;
  }

  .border-white {
    border-color: var(--color-white);
  }

  .border-t-blue-600 {
    border-top-color: var(--color-blue-600);
  }

  .bg-background {
    background-color: var(--background);
  }

  .bg-black\/50 {
    background-color: #00000080;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .bg-black\/50 {
      background-color: color-mix(in oklab, var(--color-black) 50%, transparent);
    }
  }

  .bg-blue-50 {
    background-color: var(--color-blue-50);
  }

  .bg-blue-600 {
    background-color: var(--color-blue-600);
  }

  .bg-border {
    background-color: var(--border);
  }

  .bg-card {
    background-color: var(--card);
  }

  .bg-destructive {
    background-color: var(--destructive);
  }

  .bg-gray-50 {
    background-color: var(--color-gray-50);
  }

  .bg-gray-100 {
    background-color: var(--color-gray-100);
  }

  .bg-gray-300 {
    background-color: var(--color-gray-300);
  }

  .bg-green-50 {
    background-color: var(--color-green-50);
  }

  .bg-green-500 {
    background-color: var(--color-green-500);
  }

  .bg-input-background {
    background-color: var(--input-background);
  }

  .bg-muted {
    background-color: var(--muted);
  }

  .bg-orange-50 {
    background-color: var(--color-orange-50);
  }

  .bg-orange-500 {
    background-color: var(--color-orange-500);
  }

  .bg-popover {
    background-color: var(--popover);
  }

  .bg-primary {
    background-color: var(--primary);
  }

  .bg-purple-50 {
    background-color: var(--color-purple-50);
  }

  .bg-secondary {
    background-color: var(--secondary);
  }

  .bg-white {
    background-color: var(--color-white);
  }

  .bg-yellow-500 {
    background-color: var(--color-yellow-500);
  }

  .bg-gradient-to-br {
    --tw-gradient-position: to bottom right in oklab;
    background-image: linear-gradient(var(--tw-gradient-stops));
  }

  .bg-gradient-to-r {
    --tw-gradient-position: to right in oklab;
    background-image: linear-gradient(var(--tw-gradient-stops));
  }

  .from-blue-50 {
    --tw-gradient-from: var(--color-blue-50);
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }

  .from-blue-100 {
    --tw-gradient-from: var(--color-blue-100);
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }

  .from-blue-600 {
    --tw-gradient-from: var(--color-blue-600);
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }

  .to-blue-200 {
    --tw-gradient-to: var(--color-blue-200);
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }

  .to-blue-700 {
    --tw-gradient-to: var(--color-blue-700);
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }

  .to-green-50 {
    --tw-gradient-to: var(--color-green-50);
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }

  .bg-clip-text {
    background-clip: text;
  }

  .fill-current {
    fill: currentColor;
  }

  .fill-red-500 {
    fill: var(--color-red-500);
  }

  .fill-white {
    fill: var(--color-white);
  }

  .fill-yellow-400 {
    fill: var(--color-yellow-400);
  }

  .object-contain {
    object-fit: contain;
  }

  .p-0 {
    padding: calc(var(--spacing) * 0);
  }

  .p-1 {
    padding: calc(var(--spacing) * 1);
  }

  .p-2 {
    padding: calc(var(--spacing) * 2);
  }

  .p-3 {
    padding: calc(var(--spacing) * 3);
  }

  .p-4 {
    padding: calc(var(--spacing) * 4);
  }

  .p-6 {
    padding: calc(var(--spacing) * 6);
  }

  .p-8 {
    padding: calc(var(--spacing) * 8);
  }

  .p-\[3px\] {
    padding: 3px;
  }

  .px-2 {
    padding-inline: calc(var(--spacing) * 2);
  }

  .px-3 {
    padding-inline: calc(var(--spacing) * 3);
  }

  .px-4 {
    padding-inline: calc(var(--spacing) * 4);
  }

  .px-6 {
    padding-inline: calc(var(--spacing) * 6);
  }

  .py-0\.5 {
    padding-block: calc(var(--spacing) * .5);
  }

  .py-1 {
    padding-block: calc(var(--spacing) * 1);
  }

  .py-1\.5 {
    padding-block: calc(var(--spacing) * 1.5);
  }

  .py-2 {
    padding-block: calc(var(--spacing) * 2);
  }

  .py-3 {
    padding-block: calc(var(--spacing) * 3);
  }

  .pt-2 {
    padding-top: calc(var(--spacing) * 2);
  }

  .pt-6 {
    padding-top: calc(var(--spacing) * 6);
  }

  .pr-2 {
    padding-right: calc(var(--spacing) * 2);
  }

  .pr-8 {
    padding-right: calc(var(--spacing) * 8);
  }

  .pr-10 {
    padding-right: calc(var(--spacing) * 10);
  }

  .pb-6 {
    padding-bottom: calc(var(--spacing) * 6);
  }

  .pl-2 {
    padding-left: calc(var(--spacing) * 2);
  }

  .pl-8 {
    padding-left: calc(var(--spacing) * 8);
  }

  .pl-10 {
    padding-left: calc(var(--spacing) * 10);
  }

  .text-center {
    text-align: center;
  }

  .text-base {
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
  }

  .text-lg {
    font-size: var(--text-lg);
    line-height: var(--tw-leading, var(--text-lg--line-height));
  }

  .text-sm {
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
  }

  .text-xl {
    font-size: var(--text-xl);
    line-height: var(--tw-leading, var(--text-xl--line-height));
  }

  .text-xs {
    font-size: var(--text-xs);
    line-height: var(--tw-leading, var(--text-xs--line-height));
  }

  .leading-none {
    --tw-leading: 1;
    line-height: 1;
  }

  .font-medium {
    --tw-font-weight: var(--font-weight-medium);
    font-weight: var(--font-weight-medium);
  }

  .font-semibold {
    --tw-font-weight: var(--font-weight-semibold);
    font-weight: var(--font-weight-semibold);
  }

  .tracking-widest {
    --tw-tracking: var(--tracking-widest);
    letter-spacing: var(--tracking-widest);
  }

  .whitespace-nowrap {
    white-space: nowrap;
  }

  .text-blue-100 {
    color: var(--color-blue-100);
  }

  .text-blue-500 {
    color: var(--color-blue-500);
  }

  .text-blue-600 {
    color: var(--color-blue-600);
  }

  .text-card-foreground {
    color: var(--card-foreground);
  }

  .text-current {
    color: currentColor;
  }

  .text-foreground {
    color: var(--foreground);
  }

  .text-gray-300 {
    color: var(--color-gray-300);
  }

  .text-gray-400 {
    color: var(--color-gray-400);
  }

  .text-gray-500 {
    color: var(--color-gray-500);
  }

  .text-gray-600 {
    color: var(--color-gray-600);
  }

  .text-gray-900 {
    color: var(--color-gray-900);
  }

  .text-green-600 {
    color: var(--color-green-600);
  }

  .text-muted-foreground {
    color: var(--muted-foreground);
  }

  .text-orange-600 {
    color: var(--color-orange-600);
  }

  .text-popover-foreground {
    color: var(--popover-foreground);
  }

  .text-primary {
    color: var(--primary);
  }

  .text-primary-foreground {
    color: var(--primary-foreground);
  }

  .text-red-500 {
    color: var(--color-red-500);
  }

  .text-secondary-foreground {
    color: var(--secondary-foreground);
  }

  .text-transparent {
    color: #0000;
  }

  .text-white {
    color: var(--color-white);
  }

  .text-yellow-400 {
    color: var(--color-yellow-400);
  }

  .underline-offset-4 {
    text-underline-offset: 4px;
  }

  .opacity-40 {
    opacity: .4;
  }

  .opacity-50 {
    opacity: .5;
  }

  .opacity-70 {
    opacity: .7;
  }

  .shadow-lg {
    --tw-shadow: 0 10px 15px -3px var(--tw-shadow-color, #0000001a), 0 4px 6px -4px var(--tw-shadow-color, #0000001a);
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }

  .shadow-md {
    --tw-shadow: 0 4px 6px -1px var(--tw-shadow-color, #0000001a), 0 2px 4px -2px var(--tw-shadow-color, #0000001a);
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }

  .shadow-sm {
    --tw-shadow: 0 1px 3px 0 var(--tw-shadow-color, #0000001a), 0 1px 2px -1px var(--tw-shadow-color, #0000001a);
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }

  .shadow-xs {
    --tw-shadow: 0 1px 2px 0 var(--tw-shadow-color, #0000000d);
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }

  .ring-ring\/50 {
    --tw-ring-color: var(--ring);
  }

  @supports (color: color-mix(in lab, red, red)) {
    .ring-ring\/50 {
      --tw-ring-color: color-mix(in oklab, var(--ring) 50%, transparent);
    }
  }

  .ring-offset-background {
    --tw-ring-offset-color: var(--background);
  }

  .outline-hidden {
    --tw-outline-style: none;
    outline-style: none;
  }

  @media (forced-colors: active) {
    .outline-hidden {
      outline-offset: 2px;
      outline: 2px solid #0000;
    }
  }

  .outline {
    outline-style: var(--tw-outline-style);
    outline-width: 1px;
  }

  .filter {
    filter: var(--tw-blur, ) var(--tw-brightness, ) var(--tw-contrast, ) var(--tw-grayscale, ) var(--tw-hue-rotate, ) var(--tw-invert, ) var(--tw-saturate, ) var(--tw-sepia, ) var(--tw-drop-shadow, );
  }

  .transition {
    transition-property: color, background-color, border-color, outline-color, text-decoration-color, fill, stroke, --tw-gradient-from, --tw-gradient-via, --tw-gradient-to, opacity, box-shadow, transform, translate, scale, rotate, filter, -webkit-backdrop-filter, backdrop-filter;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }

  .transition-\[color\,box-shadow\] {
    transition-property: color, box-shadow;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }

  .transition-all {
    transition-property: all;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }

  .transition-colors {
    transition-property: color, background-color, border-color, outline-color, text-decoration-color, fill, stroke, --tw-gradient-from, --tw-gradient-via, --tw-gradient-to;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }

  .transition-opacity {
    transition-property: opacity;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }

  .transition-shadow {
    transition-property: box-shadow;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }

  .transition-transform {
    transition-property: transform, translate, scale, rotate;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }

  .transition-none {
    transition-property: none;
  }

  .duration-200 {
    --tw-duration: .2s;
    transition-duration: .2s;
  }

  .ease-in-out {
    --tw-ease: var(--ease-in-out);
    transition-timing-function: var(--ease-in-out);
  }

  .outline-none {
    --tw-outline-style: none;
    outline-style: none;
  }

  .select-none {
    -webkit-user-select: none;
    user-select: none;
  }

  .group-data-\[disabled\=true\]\:pointer-events-none:is(:where(.group)[data-disabled="true"] *) {
    pointer-events: none;
  }

  .group-data-\[disabled\=true\]\:opacity-50:is(:where(.group)[data-disabled="true"] *) {
    opacity: .5;
  }

  .peer-disabled\:cursor-not-allowed:is(:where(.peer):disabled ~ *) {
    cursor: not-allowed;
  }

  .peer-disabled\:opacity-50:is(:where(.peer):disabled ~ *) {
    opacity: .5;
  }

  .selection\:bg-primary ::selection, .selection\:bg-primary::selection {
    background-color: var(--primary);
  }

  .selection\:text-primary-foreground ::selection, .selection\:text-primary-foreground::selection {
    color: var(--primary-foreground);
  }

  .file\:inline-flex::file-selector-button {
    display: inline-flex;
  }

  .file\:h-7::file-selector-button {
    height: calc(var(--spacing) * 7);
  }

  .file\:border-0::file-selector-button {
    border-style: var(--tw-border-style);
    border-width: 0;
  }

  .file\:bg-transparent::file-selector-button {
    background-color: #0000;
  }

  .file\:text-sm::file-selector-button {
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
  }

  .file\:font-medium::file-selector-button {
    --tw-font-weight: var(--font-weight-medium);
    font-weight: var(--font-weight-medium);
  }

  .file\:text-foreground::file-selector-button {
    color: var(--foreground);
  }

  .placeholder\:text-muted-foreground::placeholder {
    color: var(--muted-foreground);
  }

  @media (hover: hover) {
    .hover\:scale-110:hover {
      --tw-scale-x: 110%;
      --tw-scale-y: 110%;
      --tw-scale-z: 110%;
      scale: var(--tw-scale-x) var(--tw-scale-y);
    }
  }

  @media (hover: hover) {
    .hover\:border-blue-500:hover {
      border-color: var(--color-blue-500);
    }
  }

  @media (hover: hover) {
    .hover\:bg-accent:hover {
      background-color: var(--accent);
    }
  }

  @media (hover: hover) {
    .hover\:bg-destructive\/90:hover {
      background-color: var(--destructive);
    }

    @supports (color: color-mix(in lab, red, red)) {
      .hover\:bg-destructive\/90:hover {
        background-color: color-mix(in oklab, var(--destructive) 90%, transparent);
      }
    }
  }

  @media (hover: hover) {
    .hover\:bg-green-600:hover {
      background-color: var(--color-green-600);
    }
  }

  @media (hover: hover) {
    .hover\:bg-orange-600:hover {
      background-color: var(--color-orange-600);
    }
  }

  @media (hover: hover) {
    .hover\:bg-primary\/90:hover {
      background-color: var(--primary);
    }

    @supports (color: color-mix(in lab, red, red)) {
      .hover\:bg-primary\/90:hover {
        background-color: color-mix(in oklab, var(--primary) 90%, transparent);
      }
    }
  }

  @media (hover: hover) {
    .hover\:bg-secondary\/80:hover {
      background-color: var(--secondary);
    }

    @supports (color: color-mix(in lab, red, red)) {
      .hover\:bg-secondary\/80:hover {
        background-color: color-mix(in oklab, var(--secondary) 80%, transparent);
      }
    }
  }

  @media (hover: hover) {
    .hover\:bg-white\/20:hover {
      background-color: #fff3;
    }

    @supports (color: color-mix(in lab, red, red)) {
      .hover\:bg-white\/20:hover {
        background-color: color-mix(in oklab, var(--color-white) 20%, transparent);
      }
    }
  }

  @media (hover: hover) {
    .hover\:bg-yellow-600:hover {
      background-color: var(--color-yellow-600);
    }
  }

  @media (hover: hover) {
    .hover\:text-accent-foreground:hover {
      color: var(--accent-foreground);
    }
  }

  @media (hover: hover) {
    .hover\:underline:hover {
      text-decoration-line: underline;
    }
  }

  @media (hover: hover) {
    .hover\:opacity-100:hover {
      opacity: 1;
    }
  }

  @media (hover: hover) {
    .hover\:shadow-lg:hover {
      --tw-shadow: 0 10px 15px -3px var(--tw-shadow-color, #0000001a), 0 4px 6px -4px var(--tw-shadow-color, #0000001a);
      box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
    }
  }

  @media (hover: hover) {
    .hover\:ring-4:hover {
      --tw-ring-shadow: var(--tw-ring-inset, ) 0 0 0 calc(4px + var(--tw-ring-offset-width)) var(--tw-ring-color, currentcolor);
      box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
    }
  }

  .focus\:bg-accent:focus {
    background-color: var(--accent);
  }

  .focus\:text-accent-foreground:focus {
    color: var(--accent-foreground);
  }

  .focus\:ring-2:focus {
    --tw-ring-shadow: var(--tw-ring-inset, ) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color, currentcolor);
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }

  .focus\:ring-ring:focus {
    --tw-ring-color: var(--ring);
  }

  .focus\:ring-offset-2:focus {
    --tw-ring-offset-width: 2px;
    --tw-ring-offset-shadow: var(--tw-ring-inset, ) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);
  }

  .focus\:outline-hidden:focus {
    --tw-outline-style: none;
    outline-style: none;
  }

  @media (forced-colors: active) {
    .focus\:outline-hidden:focus {
      outline-offset: 2px;
      outline: 2px solid #0000;
    }
  }

  .focus-visible\:border-ring:focus-visible {
    border-color: var(--ring);
  }

  .focus-visible\:ring-4:focus-visible {
    --tw-ring-shadow: var(--tw-ring-inset, ) 0 0 0 calc(4px + var(--tw-ring-offset-width)) var(--tw-ring-color, currentcolor);
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }

  .focus-visible\:ring-\[3px\]:focus-visible {
    --tw-ring-shadow: var(--tw-ring-inset, ) 0 0 0 calc(3px + var(--tw-ring-offset-width)) var(--tw-ring-color, currentcolor);
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }

  .focus-visible\:ring-destructive\/20:focus-visible {
    --tw-ring-color: var(--destructive);
  }

  @supports (color: color-mix(in lab, red, red)) {
    .focus-visible\:ring-destructive\/20:focus-visible {
      --tw-ring-color: color-mix(in oklab, var(--destructive) 20%, transparent);
    }
  }

  .focus-visible\:ring-ring\/50:focus-visible {
    --tw-ring-color: var(--ring);
  }

  @supports (color: color-mix(in lab, red, red)) {
    .focus-visible\:ring-ring\/50:focus-visible {
      --tw-ring-color: color-mix(in oklab, var(--ring) 50%, transparent);
    }
  }

  .focus-visible\:outline-hidden:focus-visible {
    --tw-outline-style: none;
    outline-style: none;
  }

  @media (forced-colors: active) {
    .focus-visible\:outline-hidden:focus-visible {
      outline-offset: 2px;
      outline: 2px solid #0000;
    }
  }

  .focus-visible\:outline-1:focus-visible {
    outline-style: var(--tw-outline-style);
    outline-width: 1px;
  }

  .focus-visible\:outline-ring:focus-visible {
    outline-color: var(--ring);
  }

  .disabled\:pointer-events-none:disabled {
    pointer-events: none;
  }

  .disabled\:cursor-not-allowed:disabled {
    cursor: not-allowed;
  }

  .disabled\:opacity-50:disabled {
    opacity: .5;
  }

  .has-data-\[slot\=card-action\]\:grid-cols-\[1fr_auto\]:has([data-slot="card-action"]) {
    grid-template-columns: 1fr auto;
  }

  .has-\[\>svg\]\:px-2\.5:has( > svg) {
    padding-inline: calc(var(--spacing) * 2.5);
  }

  .has-\[\>svg\]\:px-3:has( > svg) {
    padding-inline: calc(var(--spacing) * 3);
  }

  .has-\[\>svg\]\:px-4:has( > svg) {
    padding-inline: calc(var(--spacing) * 4);
  }

  .aria-invalid\:border-destructive[aria-invalid="true"] {
    border-color: var(--destructive);
  }

  .aria-invalid\:ring-destructive\/20[aria-invalid="true"] {
    --tw-ring-color: var(--destructive);
  }

  @supports (color: color-mix(in lab, red, red)) {
    .aria-invalid\:ring-destructive\/20[aria-invalid="true"] {
      --tw-ring-color: color-mix(in oklab, var(--destructive) 20%, transparent);
    }
  }

  .data-\[disabled\]\:pointer-events-none[data-disabled] {
    pointer-events: none;
  }

  .data-\[disabled\]\:opacity-50[data-disabled] {
    opacity: .5;
  }

  .data-\[inset\]\:pl-8[data-inset] {
    padding-left: calc(var(--spacing) * 8);
  }

  .data-\[orientation\=horizontal\]\:h-4[data-orientation="horizontal"] {
    height: calc(var(--spacing) * 4);
  }

  .data-\[orientation\=horizontal\]\:h-full[data-orientation="horizontal"] {
    height: 100%;
  }

  .data-\[orientation\=horizontal\]\:h-px[data-orientation="horizontal"] {
    height: 1px;
  }

  .data-\[orientation\=horizontal\]\:w-full[data-orientation="horizontal"] {
    width: 100%;
  }

  .data-\[orientation\=vertical\]\:h-full[data-orientation="vertical"] {
    height: 100%;
  }

  .data-\[orientation\=vertical\]\:min-h-44[data-orientation="vertical"] {
    min-height: calc(var(--spacing) * 44);
  }

  .data-\[orientation\=vertical\]\:w-1\.5[data-orientation="vertical"] {
    width: calc(var(--spacing) * 1.5);
  }

  .data-\[orientation\=vertical\]\:w-auto[data-orientation="vertical"] {
    width: auto;
  }

  .data-\[orientation\=vertical\]\:w-full[data-orientation="vertical"] {
    width: 100%;
  }

  .data-\[orientation\=vertical\]\:w-px[data-orientation="vertical"] {
    width: 1px;
  }

  .data-\[orientation\=vertical\]\:flex-col[data-orientation="vertical"] {
    flex-direction: column;
  }

  .data-\[placeholder\]\:text-muted-foreground[data-placeholder] {
    color: var(--muted-foreground);
  }

  .data-\[side\=bottom\]\:translate-y-1[data-side="bottom"] {
    --tw-translate-y: calc(var(--spacing) * 1);
    translate: var(--tw-translate-x) var(--tw-translate-y);
  }

  .data-\[side\=bottom\]\:slide-in-from-top-2[data-side="bottom"] {
    --tw-enter-translate-y: calc(2 * var(--spacing) * -1);
  }

  .data-\[side\=left\]\:-translate-x-1[data-side="left"] {
    --tw-translate-x: calc(var(--spacing) * -1);
    translate: var(--tw-translate-x) var(--tw-translate-y);
  }

  .data-\[side\=left\]\:slide-in-from-right-2[data-side="left"] {
    --tw-enter-translate-x: calc(2 * var(--spacing));
  }

  .data-\[side\=right\]\:translate-x-1[data-side="right"] {
    --tw-translate-x: calc(var(--spacing) * 1);
    translate: var(--tw-translate-x) var(--tw-translate-y);
  }

  .data-\[side\=right\]\:slide-in-from-left-2[data-side="right"] {
    --tw-enter-translate-x: calc(2 * var(--spacing) * -1);
  }

  .data-\[side\=top\]\:-translate-y-1[data-side="top"] {
    --tw-translate-y: calc(var(--spacing) * -1);
    translate: var(--tw-translate-x) var(--tw-translate-y);
  }

  .data-\[side\=top\]\:slide-in-from-bottom-2[data-side="top"] {
    --tw-enter-translate-y: calc(2 * var(--spacing));
  }

  .data-\[size\=default\]\:h-9[data-size="default"] {
    height: calc(var(--spacing) * 9);
  }

  .data-\[size\=sm\]\:h-8[data-size="sm"] {
    height: calc(var(--spacing) * 8);
  }

  :is(.\*\:data-\[slot\=select-value\]\:line-clamp-1 > *)[data-slot="select-value"] {
    -webkit-line-clamp: 1;
    -webkit-box-orient: vertical;
    display: -webkit-box;
    overflow: hidden;
  }

  :is(.\*\:data-\[slot\=select-value\]\:flex > *)[data-slot="select-value"] {
    display: flex;
  }

  :is(.\*\:data-\[slot\=select-value\]\:items-center > *)[data-slot="select-value"] {
    align-items: center;
  }

  :is(.\*\:data-\[slot\=select-value\]\:gap-2 > *)[data-slot="select-value"] {
    gap: calc(var(--spacing) * 2);
  }

  .data-\[state\=active\]\:bg-card[data-state="active"] {
    background-color: var(--card);
  }

  .data-\[state\=checked\]\:border-primary[data-state="checked"] {
    border-color: var(--primary);
  }

  .data-\[state\=checked\]\:bg-primary[data-state="checked"] {
    background-color: var(--primary);
  }

  .data-\[state\=checked\]\:text-primary-foreground[data-state="checked"] {
    color: var(--primary-foreground);
  }

  .data-\[state\=closed\]\:animate-out[data-state="closed"] {
    animation: exit var(--tw-duration, .15s) var(--tw-ease, ease);
  }

  .data-\[state\=closed\]\:duration-300[data-state="closed"] {
    --tw-duration: .3s;
    transition-duration: .3s;
  }

  .data-\[state\=closed\]\:fade-out-0[data-state="closed"] {
    --tw-exit-opacity: 0;
  }

  .data-\[state\=closed\]\:slide-out-to-bottom[data-state="closed"] {
    --tw-exit-translate-y: 100%;
  }

  .data-\[state\=closed\]\:slide-out-to-left[data-state="closed"] {
    --tw-exit-translate-x: -100%;
  }

  .data-\[state\=closed\]\:slide-out-to-right[data-state="closed"] {
    --tw-exit-translate-x: 100%;
  }

  .data-\[state\=closed\]\:slide-out-to-top[data-state="closed"] {
    --tw-exit-translate-y: -100%;
  }

  .data-\[state\=closed\]\:zoom-out-95[data-state="closed"] {
    --tw-exit-scale: .95;
  }

  .data-\[state\=open\]\:animate-in[data-state="open"] {
    animation: enter var(--tw-duration, .15s) var(--tw-ease, ease);
  }

  .data-\[state\=open\]\:bg-accent[data-state="open"] {
    background-color: var(--accent);
  }

  .data-\[state\=open\]\:bg-secondary[data-state="open"] {
    background-color: var(--secondary);
  }

  .data-\[state\=open\]\:text-accent-foreground[data-state="open"] {
    color: var(--accent-foreground);
  }

  .data-\[state\=open\]\:text-muted-foreground[data-state="open"] {
    color: var(--muted-foreground);
  }

  .data-\[state\=open\]\:duration-500[data-state="open"] {
    --tw-duration: .5s;
    transition-duration: .5s;
  }

  .data-\[state\=open\]\:fade-in-0[data-state="open"] {
    --tw-enter-opacity: 0;
  }

  .data-\[state\=open\]\:slide-in-from-bottom[data-state="open"] {
    --tw-enter-translate-y: 100%;
  }

  .data-\[state\=open\]\:slide-in-from-left[data-state="open"] {
    --tw-enter-translate-x: -100%;
  }

  .data-\[state\=open\]\:slide-in-from-right[data-state="open"] {
    --tw-enter-translate-x: 100%;
  }

  .data-\[state\=open\]\:slide-in-from-top[data-state="open"] {
    --tw-enter-translate-y: -100%;
  }

  .data-\[state\=open\]\:zoom-in-95[data-state="open"] {
    --tw-enter-scale: .95;
  }

  .data-\[variant\=destructive\]\:text-destructive[data-variant="destructive"] {
    color: var(--destructive);
  }

  .data-\[variant\=destructive\]\:focus\:bg-destructive\/10[data-variant="destructive"]:focus {
    background-color: var(--destructive);
  }

  @supports (color: color-mix(in lab, red, red)) {
    .data-\[variant\=destructive\]\:focus\:bg-destructive\/10[data-variant="destructive"]:focus {
      background-color: color-mix(in oklab, var(--destructive) 10%, transparent);
    }
  }

  .data-\[variant\=destructive\]\:focus\:text-destructive[data-variant="destructive"]:focus {
    color: var(--destructive);
  }

  @media (width >= 40rem) {
    .sm\:inline {
      display: inline;
    }
  }

  @media (width >= 40rem) {
    .sm\:max-w-lg {
      max-width: var(--container-lg);
    }
  }

  @media (width >= 40rem) {
    .sm\:max-w-md {
      max-width: var(--container-md);
    }
  }

  @media (width >= 40rem) {
    .sm\:max-w-sm {
      max-width: var(--container-sm);
    }
  }

  @media (width >= 40rem) {
    .sm\:flex-row {
      flex-direction: row;
    }
  }

  @media (width >= 40rem) {
    .sm\:justify-end {
      justify-content: flex-end;
    }
  }

  @media (width >= 40rem) {
    .sm\:text-left {
      text-align: left;
    }
  }

  @media (width >= 48rem) {
    .md\:text-sm {
      font-size: var(--text-sm);
      line-height: var(--tw-leading, var(--text-sm--line-height));
    }
  }

  .dark\:border-gray-600:is(.dark *) {
    border-color: var(--color-gray-600);
  }

  .dark\:border-gray-700:is(.dark *) {
    border-color: var(--color-gray-700);
  }

  .dark\:border-gray-800:is(.dark *) {
    border-color: var(--color-gray-800);
  }

  .dark\:border-input:is(.dark *) {
    border-color: var(--input);
  }

  .dark\:bg-blue-900\/20:is(.dark *) {
    background-color: color-mix(in srgb, oklch(.379 .146 265.522) 20%, transparent);
  }

  @supports (color: color-mix(in lab, red, red)) {
    .dark\:bg-blue-900\/20:is(.dark *) {
      background-color: color-mix(in oklab, var(--color-blue-900) 20%, transparent);
    }
  }

  .dark\:bg-destructive\/60:is(.dark *) {
    background-color: var(--destructive);
  }

  @supports (color: color-mix(in lab, red, red)) {
    .dark\:bg-destructive\/60:is(.dark *) {
      background-color: color-mix(in oklab, var(--destructive) 60%, transparent);
    }
  }

  .dark\:bg-gray-700:is(.dark *) {
    background-color: var(--color-gray-700);
  }

  .dark\:bg-gray-800:is(.dark *) {
    background-color: var(--color-gray-800);
  }

  .dark\:bg-gray-900:is(.dark *) {
    background-color: var(--color-gray-900);
  }

  .dark\:bg-input\/30:is(.dark *) {
    background-color: var(--input);
  }

  @supports (color: color-mix(in lab, red, red)) {
    .dark\:bg-input\/30:is(.dark *) {
      background-color: color-mix(in oklab, var(--input) 30%, transparent);
    }
  }

  .dark\:from-gray-800:is(.dark *) {
    --tw-gradient-from: var(--color-gray-800);
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }

  .dark\:to-gray-700:is(.dark *) {
    --tw-gradient-to: var(--color-gray-700);
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }

  .dark\:to-gray-900:is(.dark *) {
    --tw-gradient-to: var(--color-gray-900);
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }

  .dark\:text-blue-400:is(.dark *) {
    color: var(--color-blue-400);
  }

  .dark\:text-gray-100:is(.dark *) {
    color: var(--color-gray-100);
  }

  .dark\:text-gray-300:is(.dark *) {
    color: var(--color-gray-300);
  }

  .dark\:text-gray-400:is(.dark *) {
    color: var(--color-gray-400);
  }

  .dark\:text-gray-500:is(.dark *) {
    color: var(--color-gray-500);
  }

  .dark\:text-gray-600:is(.dark *) {
    color: var(--color-gray-600);
  }

  .dark\:text-green-400:is(.dark *) {
    color: var(--color-green-400);
  }

  .dark\:text-muted-foreground:is(.dark *) {
    color: var(--muted-foreground);
  }

  .dark\:text-orange-400:is(.dark *) {
    color: var(--color-orange-400);
  }

  .dark\:text-white:is(.dark *) {
    color: var(--color-white);
  }

  @media (hover: hover) {
    .dark\:hover\:border-blue-500:is(.dark *):hover {
      border-color: var(--color-blue-500);
    }
  }

  @media (hover: hover) {
    .dark\:hover\:bg-accent\/50:is(.dark *):hover {
      background-color: var(--accent);
    }

    @supports (color: color-mix(in lab, red, red)) {
      .dark\:hover\:bg-accent\/50:is(.dark *):hover {
        background-color: color-mix(in oklab, var(--accent) 50%, transparent);
      }
    }
  }

  @media (hover: hover) {
    .dark\:hover\:bg-input\/50:is(.dark *):hover {
      background-color: var(--input);
    }

    @supports (color: color-mix(in lab, red, red)) {
      .dark\:hover\:bg-input\/50:is(.dark *):hover {
        background-color: color-mix(in oklab, var(--input) 50%, transparent);
      }
    }
  }

  .dark\:focus-visible\:ring-destructive\/40:is(.dark *):focus-visible {
    --tw-ring-color: var(--destructive);
  }

  @supports (color: color-mix(in lab, red, red)) {
    .dark\:focus-visible\:ring-destructive\/40:is(.dark *):focus-visible {
      --tw-ring-color: color-mix(in oklab, var(--destructive) 40%, transparent);
    }
  }

  .dark\:aria-invalid\:ring-destructive\/40:is(.dark *)[aria-invalid="true"] {
    --tw-ring-color: var(--destructive);
  }

  @supports (color: color-mix(in lab, red, red)) {
    .dark\:aria-invalid\:ring-destructive\/40:is(.dark *)[aria-invalid="true"] {
      --tw-ring-color: color-mix(in oklab, var(--destructive) 40%, transparent);
    }
  }

  .dark\:data-\[state\=active\]\:border-input:is(.dark *)[data-state="active"] {
    border-color: var(--input);
  }

  .dark\:data-\[state\=active\]\:bg-input\/30:is(.dark *)[data-state="active"] {
    background-color: var(--input);
  }

  @supports (color: color-mix(in lab, red, red)) {
    .dark\:data-\[state\=active\]\:bg-input\/30:is(.dark *)[data-state="active"] {
      background-color: color-mix(in oklab, var(--input) 30%, transparent);
    }
  }

  .dark\:data-\[state\=active\]\:text-foreground:is(.dark *)[data-state="active"] {
    color: var(--foreground);
  }

  .dark\:data-\[state\=checked\]\:bg-primary:is(.dark *)[data-state="checked"] {
    background-color: var(--primary);
  }

  .dark\:data-\[variant\=destructive\]\:focus\:bg-destructive\/20:is(.dark *)[data-variant="destructive"]:focus {
    background-color: var(--destructive);
  }

  @supports (color: color-mix(in lab, red, red)) {
    .dark\:data-\[variant\=destructive\]\:focus\:bg-destructive\/20:is(.dark *)[data-variant="destructive"]:focus {
      background-color: color-mix(in oklab, var(--destructive) 20%, transparent);
    }
  }

  .\[\&_svg\]\:pointer-events-none svg {
    pointer-events: none;
  }

  .\[\&_svg\]\:shrink-0 svg {
    flex-shrink: 0;
  }

  .\[\&_svg\:not\(\[class\*\=\'size-\'\]\)\]\:size-4 svg:not([class*="size-"]) {
    width: calc(var(--spacing) * 4);
    height: calc(var(--spacing) * 4);
  }

  .\[\&_svg\:not\(\[class\*\=\'text-\'\]\)\]\:text-muted-foreground svg:not([class*="text-"]) {
    color: var(--muted-foreground);
  }

  .\[\.border-b\]\:pb-6.border-b {
    padding-bottom: calc(var(--spacing) * 6);
  }

  .\[\.border-t\]\:pt-6.border-t {
    padding-top: calc(var(--spacing) * 6);
  }

  :is(.\*\:\[span\]\:last\:flex > *):is(span):last-child {
    display: flex;
  }

  :is(.\*\:\[span\]\:last\:items-center > *):is(span):last-child {
    align-items: center;
  }

  :is(.\*\:\[span\]\:last\:gap-2 > *):is(span):last-child {
    gap: calc(var(--spacing) * 2);
  }

  :is(.data-\[variant\=destructive\]\:\*\:\[svg\]\:\!text-destructive[data-variant="destructive"] > *):is(svg) {
    color: var(--destructive) !important;
  }

  .\[\&\:last-child\]\:pb-6:last-child {
    padding-bottom: calc(var(--spacing) * 6);
  }

  .\[\&\>svg\]\:pointer-events-none > svg {
    pointer-events: none;
  }

  .\[\&\>svg\]\:size-3 > svg {
    width: calc(var(--spacing) * 3);
    height: calc(var(--spacing) * 3);
  }

  @media (hover: hover) {
    a.\[a\&\]\:hover\:bg-accent:hover {
      background-color: var(--accent);
    }
  }

  @media (hover: hover) {
    a.\[a\&\]\:hover\:bg-destructive\/90:hover {
      background-color: var(--destructive);
    }

    @supports (color: color-mix(in lab, red, red)) {
      a.\[a\&\]\:hover\:bg-destructive\/90:hover {
        background-color: color-mix(in oklab, var(--destructive) 90%, transparent);
      }
    }
  }

  @media (hover: hover) {
    a.\[a\&\]\:hover\:bg-primary\/90:hover {
      background-color: var(--primary);
    }

    @supports (color: color-mix(in lab, red, red)) {
      a.\[a\&\]\:hover\:bg-primary\/90:hover {
        background-color: color-mix(in oklab, var(--primary) 90%, transparent);
      }
    }
  }

  @media (hover: hover) {
    a.\[a\&\]\:hover\:bg-secondary\/90:hover {
      background-color: var(--secondary);
    }

    @supports (color: color-mix(in lab, red, red)) {
      a.\[a\&\]\:hover\:bg-secondary\/90:hover {
        background-color: color-mix(in oklab, var(--secondary) 90%, transparent);
      }
    }
  }

  @media (hover: hover) {
    a.\[a\&\]\:hover\:text-accent-foreground:hover {
      color: var(--accent-foreground);
    }
  }
}

@mixin flex-between {
  display: flex; align-items: center; justify-content: space-between;
}

@mixin flex-column {
  display: flex; flex-direction: column;
}

.app {
  background: $ white;
  height: 100vh;
}

.dark .app {
  background: $ dark-bg;
}

.searchSection {
  padding: $ spacing-4;
  box-shadow: $ shadow-md;
}

.searchSection .container {
  max-width: 56rem;
  margin: 0 auto;
}

.filterBar {
  border-bottom: 1px solid$ gray-200;
  background: $ white;
  padding: $ spacing-3;
  box-shadow: $ shadow-sm;
}

.dark .filterBar {
  border-color: $ dark-border;
  background: $ dark-bg;
}

.filterBar .container {
  gap: $ spacing-2;
  flex-wrap: wrap;
  max-width: 56rem;
  margin: 0 auto;
}

.filterBar .filterControls {
  align-items: center;
  gap: $ spacing-2;
  display: flex;
}

.filterBar .lotCount {
  color: $ gray-600;
  font-size: .875rem;
}

.dark :is(.filterBar .lotCount) {
  color: $ gray-400;
}

.mainContent {
  flex: 1;
  overflow: hidden;
}

.mainContent .container {
  max-width: 56rem;
  height: 100%;
  margin: 0 auto;
}

.tabsList {
  border-radius: 0;
  grid-template-columns: repeat(2, 1fr);
  width: 100%;
  display: grid;
}

.tabTrigger {
  align-items: center;
  gap: $ spacing-2;
  display: flex;
}

.tabContentMap {
  flex: 1;
  margin: 0;
  padding: 0;
}

.tabContentList {
  padding: $ spacing-4;
  background: $ gray-50;
  flex: 1;
  margin: 0;
  overflow-y: auto;
}

.dark .tabContentList {
  background: $ dark-bg;
}

.tabContentList .listContainer {
  gap: $ spacing-3;
  flex-direction: column;
  display: flex;
}

.header {
  z-index: $ z-index-sticky;
  background: $ white;
  border-bottom: 1px solid$ gray-200;
  box-shadow: $ shadow-sm;
  position: sticky;
  top: 0;
}

.dark .header {
  background: $ dark-bg;
  border-color: $ dark-border;
}

.header .container {
  max-width: 1280px;
  padding: $ spacing-3$ spacing-4;
  margin: 0 auto;
}

.header .actions {
  align-items: center;
  gap: $ spacing-2;
  display: flex;
}

.header .languageButton, .header .themeButton, .header .ownerButton {
  color: $ gray-700;
  align-items: center;
  gap: $ spacing-2;
  background: none;
  display: flex;
}

.dark :is(.header .languageButton, .header .themeButton, .header .ownerButton) {
  color: $ dark-text;
}

:is(.header .languageButton, .header .themeButton, .header .ownerButton):hover {
  background: $ gray-100;
}

.dark :is(.header .languageButton, .header .themeButton, .header .ownerButton):hover {
  background: $ dark-bg-secondary;
}

:is(.header .languageButton, .header .themeButton, .header .ownerButton) .icon {
  width: 1rem;
  height: 1rem;
}

.header .ownerButton {
  border: 1px solid$ gray-300;
}

.dark :is(.header .ownerButton) {
  border-color: $ dark-border;
}

.logo {
  align-items: center;
  gap: $ spacing-2;
  display: flex;
}

.logo .icon {
  background: linear-gradient(135deg, $ primary-blue 0%, $ primary-blue-dark 100%);
  border-radius: $ radius-lg;
  box-shadow: $ shadow-md;
}

.logo .icon.sm {
  width: 2rem;
  height: 2rem;
}

.logo .icon.md {
  width: 2.5rem;
  height: 2.5rem;
}

.logo .icon.lg {
  width: 3rem;
  height: 3rem;
}

.logo .icon svg {
  width: 66.67%;
  height: 66.67%;
  color: $ white;
  fill: $ white;
}

.logo .text {
  background: linear-gradient(135deg, $ primary-blue 0%, $ primary-blue-dark 100%);
  -webkit-text-fill-color: transparent;
  background-clip: text;
  font-weight: 600;
}

.logo .text.sm {
  font-size: 1rem;
}

.logo .text.md {
  font-size: 1.125rem;
}

.logo .text.lg {
  font-size: 1.25rem;
}

.mapContainer {
  border-radius: $ radius-lg;
  background: linear-gradient(135deg, #dbeafe 0%, #d1fae5 100%);
  width: 100%;
  height: 100%;
  position: relative;
  overflow: hidden;
}

.dark .mapContainer {
  background: linear-gradient(135deg, $ dark-bg-secondary 0%, darken($ dark-bg, 5%) 100%);
}

.mapContainer .mapBackground {
  position: absolute;
  inset: 0;
}

.mapContainer .mapBackground .grid {
  background-image: linear-gradient(to right, $ gray-200 1px, transparent 1px), linear-gradient(to bottom, $ gray-200 1px, transparent 1px);
  background-size: 40px 40px;
  width: 100%;
  height: 100%;
}

.dark :is(.mapContainer .mapBackground .grid) {
  background-image: linear-gradient(to right, $ gray-700 1px, transparent 1px), linear-gradient(to bottom, $ gray-700 1px, transparent 1px);
}

.mapContainer .street {
  background: $ gray-300;
  opacity: .4;
  position: absolute;
}

.dark :is(.mapContainer .street) {
  background: $ gray-700;
}

.mapContainer .street.horizontal {
  height: 4rem;
  top: 33.33%;
  left: 0;
  right: 0;
}

.mapContainer .street.verticalLeft {
  width: 3rem;
  top: 0;
  bottom: 0;
  left: 25%;
}

.mapContainer .street.verticalRight {
  width: 4rem;
  top: 0;
  bottom: 0;
  right: 33.33%;
}

.mapContainer .destinationMarker {
  z-index: 20;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

.mapContainer .destinationMarker svg {
  width: 2rem;
  height: 2rem;
  color: $ secondary-red;
  fill: $ secondary-red;
}

.mapContainer .parkingMarker {
  z-index: 10;
  cursor: pointer;
  transition: transform$ transition-fast;
  position: absolute;
  transform: translate(-50%, -50%);
}

.mapContainer .parkingMarker:hover {
  transform: translate(-50%, -50%)scale(1.1);
}

.mapContainer .parkingMarker .markerContent {
  align-items: center;
  gap: $ spacing-1;
  flex-direction: column;
  display: flex;
}

.mapContainer .parkingMarker .priceBadge {
  padding: $ spacing-1$ spacing-2;
  border-radius: $ radius-md;
  box-shadow: $ shadow-lg;
  color: $ white;
  font-size: .75rem;
  font-weight: 600;
}

.mapContainer .parkingMarker .priceBadge.cheap {
  background: $ secondary-green;
}

.mapContainer .parkingMarker .priceBadge.cheap:hover {
  background: darken($ secondary-green, 5%);
}

.mapContainer .parkingMarker .priceBadge.moderate {
  background: $ secondary-yellow;
}

.mapContainer .parkingMarker .priceBadge.moderate:hover {
  background: darken($ secondary-yellow, 5%);
}

.mapContainer .parkingMarker .priceBadge.expensive {
  background: $ secondary-orange;
}

.mapContainer .parkingMarker .priceBadge.expensive:hover {
  background: darken($ secondary-orange, 5%);
}

.mapContainer .parkingMarker .parkingIcon {
  background: $ primary-blue;
  border-radius: $ radius-full;
  border: 2px solid$ white;
  width: 1.5rem;
  height: 1.5rem;
  box-shadow: $ shadow-md;
}

.mapContainer .parkingMarker .parkingIcon span {
  color: $ white;
  font-size: .75rem;
  font-weight: 600;
}

.searchContainer {
  position: relative;
}

.searchContainer .input {
  padding-left: 2.5rem;
  padding-right: 2.5rem;
}

@include rtl {
  padding-left: 2.5rem; padding-right: 2.5rem;
}

.searchContainer .searchIcon {
  width: 1rem;
  height: 1rem;
  color: $ gray-400;
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
}

@include ltr {
  left:$ spacing-3;
}

@include rtl {
  right:$ spacing-3;
}

.searchContainer .clearButton {
  cursor: pointer;
  padding: $ spacing-1;
  border-radius: $ radius-md;
  background: none;
  border: none;
  width: 1.75rem;
  height: 1.75rem;
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
}

@include ltr {
  right:$ spacing-1;
}

@include rtl {
  left:$ spacing-1;
}

.searchContainer .clearButton:hover {
  background: $ gray-100;
}

.dark .searchContainer .clearButton:hover {
  background: $ dark-bg-secondary;
}

.searchContainer .clearButton svg {
  width: 1rem;
  height: 1rem;
}

.parkingCard {
  padding: $ spacing-4;
  cursor: pointer;
  transition: all$ transition-fast;
}

.parkingCard:hover {
  box-shadow: $ shadow-lg;
}

.parkingCard .cardContent {
  gap: $ spacing-3;
  flex-direction: column;
  display: flex;
}

.parkingCard .header {
  align-items: flex-start;
  gap: $ spacing-3;
}

.parkingCard .info {
  flex: 1;
}

.parkingCard .info .name {
  margin-bottom: $ spacing-1;
  color: $ gray-900;
  font-weight: 500;
}

.dark :is(.parkingCard .info .name) {
  color: $ dark-text;
}

.parkingCard .info .address {
  align-items: center;
  gap: $ spacing-1;
  color: $ gray-600;
  font-size: .875rem;
  display: flex;
}

.dark :is(.parkingCard .info .address) {
  color: $ gray-400;
}

.parkingCard .info .address svg {
  width: .75rem;
  height: .75rem;
}

.parkingCard .priceBadge {
  padding: $ spacing-1$ spacing-2;
  border-radius: $ radius-md;
  white-space: nowrap;
  color: $ white;
  font-size: .875rem;
  font-weight: 600;
}

.parkingCard .priceBadge.cheap {
  background: $ secondary-green;
}

.parkingCard .priceBadge.moderate {
  background: $ secondary-yellow;
}

.parkingCard .priceBadge.expensive {
  background: $ secondary-orange;
}

.parkingCard .metadata {
  align-items: center;
  gap: $ spacing-4;
  flex-wrap: wrap;
  font-size: .875rem;
  display: flex;
}

.parkingCard .metadata .metaItem {
  align-items: center;
  gap: $ spacing-1;
  color: $ gray-900;
  display: flex;
}

.dark :is(.parkingCard .metadata .metaItem) {
  color: $ dark-text-secondary;
}

.parkingCard .metadata .metaItem svg {
  width: .75rem;
  height: .75rem;
}

.parkingCard .metadata .metaItem.distance svg {
  color: $ primary-blue;
}

.parkingCard .metadata .metaItem .rating {
  align-items: center;
  gap: $ spacing-1;
  display: flex;
}

.parkingCard .metadata .metaItem .rating svg {
  fill: #fbbf24;
  color: #fbbf24;
}

.parkingCard .metadata .metaItem .rating .count {
  color: $ gray-400;
}

.dark :is(.parkingCard .metadata .metaItem .rating .count) {
  color: $ gray-500;
}

.parkingCard .features {
  align-items: center;
  gap: $ spacing-2;
  flex-wrap: wrap;
  display: flex;
}

.parkingCard .features .badge {
  padding: $ spacing-1$ spacing-2;
  border-radius: $ radius-sm;
  border: 1px solid$ gray-300;
  align-items: center;
  gap: $ spacing-1;
  background: $ white;
  font-size: .75rem;
  display: flex;
}

.dark :is(.parkingCard .features .badge) {
  border-color: $ gray-600;
  color: $ dark-text-secondary;
  background: none;
}

.parkingCard .features .badge svg {
  width: .75rem;
  height: .75rem;
}

.parkingCard .detailsButton {
  border: 1px solid$ gray-300;
  background: none;
  width: 100%;
  font-size: .875rem;
}

.dark :is(.parkingCard .detailsButton) {
  border-color: $ dark-border;
  color: $ dark-text;
}

.parkingCard .detailsButton:hover {
  background: $ gray-50;
}

.dark .parkingCard .detailsButton:hover {
  background: $ dark-bg-secondary;
}

.dashboard {
  z-index: $ z-index-modal;
  background: $ white;
  position: fixed;
  inset: 0;
}

.dark .dashboard {
  background: $ dark-bg;
}

.dashboard .header {
  color: $ white;
  padding: $ spacing-4;
  box-shadow: $ shadow-md;
}

.dashboard .header .headerTop {
  margin-bottom: $ spacing-3;
}

.dashboard .header .headerTop .backButton {
  color: $ white;
  padding: $ spacing-2;
  background: none;
}

.dashboard .header .headerTop .backButton:hover {
  background: rgba($ white, .2);
}

.dashboard .header .headerTop .backButton svg {
  width: 1.25rem;
  height: 1.25rem;
}

.dashboard .header .headerTop .titleSection {
  align-items: center;
  gap: $ spacing-2;
  flex: 1;
  display: flex;
}

.dashboard .header .headerTop .titleSection svg {
  width: 1.5rem;
  height: 1.5rem;
}

.dashboard .header .headerTop .titleSection h1 {
  font-size: 1.25rem;
  font-weight: 600;
}

.dashboard .header .subtitle {
  color: rgba($ white, .8);
  font-size: .875rem;
}

.dashboard .content {
  height: calc(100vh - 120px);
  padding: $ spacing-4;
  overflow-y: auto;
}

.dashboard .lotCard {
  padding: $ spacing-4;
  margin-bottom: $ spacing-4;
}

.dashboard .lotCard .cardHeader {
  margin-bottom: $ spacing-4;
  align-items: flex-start;
}

.dashboard .lotCard .cardHeader .lotInfo {
  flex: 1;
}

.dashboard .lotCard .cardHeader .lotInfo h3 {
  color: $ gray-900;
  margin-bottom: $ spacing-1;
  font-weight: 500;
}

.dark :is(.dashboard .lotCard .cardHeader .lotInfo h3) {
  color: $ dark-text;
}

.dashboard .lotCard .cardHeader .lotInfo p {
  color: $ gray-600;
  font-size: .875rem;
}

.dark :is(.dashboard .lotCard .cardHeader .lotInfo p) {
  color: $ gray-400;
}

.dashboard .lotCard .cardHeader .editButton {
  border: 1px solid$ gray-300;
  align-items: center;
  gap: $ spacing-1;
  background: none;
  font-size: .875rem;
  display: flex;
}

.dark :is(.dashboard .lotCard .cardHeader .editButton) {
  border-color: $ dark-border;
  color: $ dark-text;
}

.dashboard .lotCard .cardHeader .editButton:hover {
  background: $ gray-50;
}

.dark .dashboard .lotCard .cardHeader .editButton:hover {
  background: $ dark-bg-secondary;
}

.dashboard .lotCard .statsGrid {
  gap: $ spacing-2;
  margin-bottom: $ spacing-4;
  grid-template-columns: repeat(4, 1fr);
  display: grid;
}

.dashboard .lotCard .statsGrid .statBox {
  text-align: center;
  padding: $ spacing-3;
  border-radius: $ radius-lg;
}

.dashboard .lotCard .statsGrid .statBox.entrance {
  background: lighten($ secondary-orange, 35%);
}

.dark .dashboard .lotCard .statsGrid .statBox.entrance {
  background: $ dark-bg;
}

.dashboard .lotCard .statsGrid .statBox.entrance .value {
  color: $ secondary-orange;
}

.dark :is(.dashboard .lotCard .statsGrid .statBox.entrance .value) {
  color: lighten($ secondary-orange, 10%);
}

.dashboard .lotCard .statsGrid .statBox.hourly {
  background: lighten($ primary-blue, 35%);
}

.dark .dashboard .lotCard .statsGrid .statBox.hourly {
  background: $ dark-bg;
}

.dashboard .lotCard .statsGrid .statBox.hourly .value {
  color: $ primary-blue;
}

.dark :is(.dashboard .lotCard .statsGrid .statBox.hourly .value) {
  color: $ primary-blue-light;
}

.dashboard .lotCard .statsGrid .statBox.occupied {
  background: lighten($ secondary-green, 45%);
}

.dark .dashboard .lotCard .statsGrid .statBox.occupied {
  background: $ dark-bg;
}

.dashboard .lotCard .statsGrid .statBox.percentage {
  background: lighten(#a855f7, 30%);
}

.dark .dashboard .lotCard .statsGrid .statBox.percentage {
  background: $ dark-bg;
}

.dashboard .lotCard .statsGrid .statBox.percentage .value {
  color: $ secondary-green;
}

.dark :is(.dashboard .lotCard .statsGrid .statBox.percentage .value) {
  color: lighten($ secondary-green, 10%);
}

.dashboard .lotCard .statsGrid .statBox .value {
  color: $ gray-900;
  font-size: 1.125rem;
  font-weight: 600;
}

.dark :is(.dashboard .lotCard .statsGrid .statBox .value) {
  color: $ dark-text;
}

.dashboard .lotCard .statsGrid .statBox .label {
  color: $ gray-600;
  margin-top: $ spacing-1;
  font-size: .75rem;
}

.dark :is(.dashboard .lotCard .statsGrid .statBox .label) {
  color: $ gray-400;
}

.dashboard .lotCard .analytics {
  gap: $ spacing-3;
  margin-bottom: $ spacing-4;
  grid-template-columns: repeat(3, 1fr);
  font-size: .875rem;
  display: grid;
}

.dashboard .lotCard .analytics .analyticsItem {
  align-items: center;
  gap: $ spacing-1;
  color: $ gray-600;
  display: flex;
}

.dark :is(.dashboard .lotCard .analytics .analyticsItem) {
  color: $ gray-400;
}

.dashboard .lotCard .analytics .analyticsItem svg {
  width: 1rem;
  height: 1rem;
}

.dashboard .lotCard .updateSection {
  padding-top: $ spacing-2;
  border-top: 1px solid$ gray-200;
}

.dark :is(.dashboard .lotCard .updateSection) {
  border-color: $ dark-border;
}

.dashboard .lotCard .updateSection .sectionTitle {
  color: $ gray-900;
  margin-bottom: $ spacing-3;
  font-weight: 500;
}

.dark :is(.dashboard .lotCard .updateSection .sectionTitle) {
  color: $ dark-text;
}

.dashboard .lotCard .updateSection .priceGrid {
  gap: $ spacing-2;
  margin-bottom: $ spacing-3;
  grid-template-columns: repeat(2, 1fr);
  display: grid;
}

.dashboard .lotCard .updateSection .priceGrid .priceInput .inputLabel {
  color: $ gray-600;
  margin-bottom: $ spacing-1;
  font-size: .75rem;
  display: block;
}

.dark :is(.dashboard .lotCard .updateSection .priceGrid .priceInput .inputLabel) {
  color: $ gray-400;
}

.dashboard .lotCard .updateSection .updateButton {
  background: $ primary-blue;
  width: 100%;
  color: $ white;
}

.dashboard .lotCard .updateSection .updateButton:hover {
  background: $ primary-blue-dark;
}

.dashboard .addForm {
  padding: $ spacing-6;
}

.dashboard .addForm h3 {
  color: $ gray-900;
  margin-bottom: $ spacing-4;
  font-weight: 500;
}

.dark :is(.dashboard .addForm h3) {
  color: $ dark-text;
}

.dashboard .addForm .formGroup {
  margin-bottom: $ spacing-4;
}

.dashboard .addForm .formGroup label {
  color: $ gray-900;
  margin-bottom: $ spacing-2;
  font-weight: 500;
  display: block;
}

.dark :is(.dashboard .addForm .formGroup label) {
  color: $ dark-text;
}

.dashboard .addForm .formGroup .description {
  color: $ gray-600;
  margin-top: $ spacing-2;
  font-size: .875rem;
}

.dark :is(.dashboard .addForm .formGroup .description) {
  color: $ gray-400;
}

.dashboard .addForm .imageUpload {
  padding-top: $ spacing-2;
  border-top: 1px solid$ gray-200;
}

.dark :is(.dashboard .addForm .imageUpload) {
  border-color: $ dark-border;
}

.dashboard .addForm .imageUpload .uploadLabel {
  color: $ gray-900;
  margin-bottom: $ spacing-2;
  font-weight: 500;
  display: block;
}

.dark :is(.dashboard .addForm .imageUpload .uploadLabel) {
  color: $ dark-text;
}

.dashboard .addForm .imageUpload .imagePreview {
  position: relative;
}

.dashboard .addForm .imageUpload .imagePreview .previewContainer {
  background: $ gray-100;
  border-radius: $ radius-lg;
  width: 100%;
  height: 12rem;
  position: relative;
  overflow: hidden;
}

.dark :is(.dashboard .addForm .imageUpload .imagePreview .previewContainer) {
  background: $ dark-bg;
}

.dashboard .addForm .imageUpload .imagePreview .previewContainer img {
  object-fit: contain;
  width: 100%;
  height: 100%;
}

.dashboard .addForm .imageUpload .imagePreview .removeButton {
  top: $ spacing-2;
  right: $ spacing-2;
  background: $ secondary-red;
  color: $ white;
  border-radius: $ radius-full;
  width: 2rem;
  height: 2rem;
  padding: 0;
  position: absolute;
}

.dashboard .addForm .imageUpload .imagePreview .removeButton svg {
  width: 1rem;
  height: 1rem;
}

.dashboard .addForm .imageUpload .imagePreview .removeButton:hover {
  background: darken($ secondary-red, 10%);
}

.dashboard .addForm .imageUpload .uploadArea {
  border: 2px dashed$ gray-300;
  border-radius: $ radius-lg;
  padding: $ spacing-8;
  text-align: center;
  cursor: pointer;
  transition: all$ transition-fast;
}

.dark :is(.dashboard .addForm .imageUpload .uploadArea) {
  border-color: $ dark-border;
}

.dashboard .addForm .imageUpload .uploadArea:hover {
  border-color: $ primary-blue;
}

.dark .dashboard .addForm .imageUpload .uploadArea:hover {
  border-color: $ primary-blue-light;
}

.dashboard .addForm .imageUpload .uploadArea .uploadContent {
  align-items: center;
  gap: $ spacing-2;
  flex-direction: column;
  display: flex;
}

.dashboard .addForm .imageUpload .uploadArea .uploadContent .iconContainer {
  background: lighten($ primary-blue, 35%);
  border-radius: $ radius-full;
  width: 3rem;
  height: 3rem;
}

.dark :is(.dashboard .addForm .imageUpload .uploadArea .uploadContent .iconContainer) {
  background: rgba($ primary-blue, .2);
}

.dashboard .addForm .imageUpload .uploadArea .uploadContent .iconContainer svg {
  width: 1.5rem;
  height: 1.5rem;
  color: $ primary-blue;
}

.dark :is(.dashboard .addForm .imageUpload .uploadArea .uploadContent .iconContainer svg) {
  color: $ primary-blue-light;
}

.dashboard .addForm .imageUpload .uploadArea .uploadContent .uploadText {
  color: $ gray-900;
  font-weight: 500;
}

.dark :is(.dashboard .addForm .imageUpload .uploadArea .uploadContent .uploadText) {
  color: $ dark-text;
}

.dashboard .addForm .imageUpload .uploadArea .uploadContent .uploadSubtext {
  color: $ gray-500;
  font-size: .875rem;
}

.dark :is(.dashboard .addForm .imageUpload .uploadArea .uploadContent .uploadSubtext) {
  color: $ gray-400;
}

.dashboard .addForm .imageUpload .uploadArea .uploadContent .uploadIcon {
  width: 1.25rem;
  height: 1.25rem;
  color: $ gray-400;
}

.dashboard .addForm .submitButton {
  background: $ primary-blue;
  width: 100%;
  color: $ white;
  justify-content: center;
  align-items: center;
  gap: $ spacing-2;
  margin-top: $ spacing-4;
  display: flex;
}

.dashboard .addForm .submitButton:hover {
  background: $ primary-blue-dark;
}

.dashboard .addForm .submitButton:disabled {
  background: $ gray-300;
  cursor: not-allowed;
}

.dark .dashboard .addForm .submitButton:disabled {
  background: $ gray-700;
}

.dashboard .addForm .submitButton svg {
  width: 1rem;
  height: 1rem;
}

html {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-size: 16px;
}

body {
  color: $ gray-900;
  background: $ white;
  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica Neue, Arial, sans-serif;
  line-height: 1.5;
}

body.dark {
  color: $ dark-text;
  background: $ dark-bg;
}

h1 {
  font-size: 2rem;
}

h2 {
  font-size: 1.5rem;
}

h3 {
  font-size: 1.25rem;
}

h4 {
  font-size: 1.125rem;
}

p {
  margin: 0;
}

::-webkit-scrollbar-track {
  background: $ gray-100;
}

.dark :is(::-webkit-scrollbar-track) {
  background: $ dark-bg-secondary;
}

::-webkit-scrollbar-thumb {
  background: $ gray-400;
  border-radius: $ radius-full;
}

::-webkit-scrollbar-thumb:hover {
  background: $ gray-500;
}

.dark :is(::-webkit-scrollbar-thumb) {
  background: $ gray-600;
}

.dark :is(::-webkit-scrollbar-thumb):hover {
  background: $ gray-500;
}

.text-left {
  text-align: left;
}

.text-right {
  text-align: right;
}

[dir="ltr"] {
  direction: ltr;
}

.animate-spin {
  animation: 1s linear infinite spin;
}

.detailsContainer {
  background: $ gray-50;
  height: 100%;
  overflow-y: auto;
}

.dark .detailsContainer {
  background: $ dark-bg;
}

.detailsContainer .header {
  background: $ white;
  border-bottom: 1px solid$ gray-200;
  padding: $ spacing-4;
  align-items: center;
  gap: $ spacing-3;
  z-index: 10;
  box-shadow: $ shadow-sm;
  position: sticky;
  top: 0;
}

.dark :is(.detailsContainer .header) {
  background: $ dark-bg;
  border-color: $ dark-border;
}

.detailsContainer .header .backButton {
  padding: $ spacing-2;
  color: $ gray-700;
  background: none;
}

.dark :is(.detailsContainer .header .backButton) {
  color: $ dark-text;
}

.detailsContainer .header .backButton:hover {
  background: $ gray-100;
}

.dark .detailsContainer .header .backButton:hover {
  background: $ dark-bg-secondary;
}

.detailsContainer .header .backButton svg {
  width: 1.25rem;
  height: 1.25rem;
}

.detailsContainer .header h2 {
  color: $ gray-900;
  font-size: 1rem;
  font-weight: 500;
}

.dark :is(.detailsContainer .header h2) {
  color: $ dark-text;
}

.detailsContainer .heroImage {
  background: linear-gradient(135deg, #dbeafe 0%, #bfdbfe 100%);
  width: 100%;
  height: 12rem;
}

.dark :is(.detailsContainer .heroImage) {
  background: linear-gradient(135deg, $ dark-bg-secondary 0%, darken($ dark-bg, 5%) 100%);
}

.detailsContainer .heroImage svg {
  width: 4rem;
  height: 4rem;
  color: $ primary-blue;
}

.dark :is(.detailsContainer .heroImage svg) {
  color: $ primary-blue-light;
}

.detailsContainer .content {
  padding: $ spacing-4;
  gap: $ spacing-4;
  flex-direction: column;
  display: flex;
}

.detailsContainer .infoCard {
  padding: $ spacing-4;
}

.detailsContainer .infoCard .cardHeader {
  margin-bottom: $ spacing-3;
  align-items: flex-start;
}

.detailsContainer .infoCard .cardHeader h1 {
  color: $ gray-900;
  font-size: 1.25rem;
  font-weight: 600;
}

.dark :is(.detailsContainer .infoCard .cardHeader h1) {
  color: $ dark-text;
}

.detailsContainer .infoCard .cardHeader .priceBadge {
  padding: $ spacing-1$ spacing-2;
  border-radius: $ radius-md;
  color: $ white;
  font-size: .875rem;
  font-weight: 600;
}

.detailsContainer .infoCard .cardHeader .priceBadge.cheap {
  background: $ secondary-green;
}

.detailsContainer .infoCard .cardHeader .priceBadge.moderate {
  background: $ secondary-yellow;
}

.detailsContainer .infoCard .cardHeader .priceBadge.expensive {
  background: $ secondary-orange;
}

.detailsContainer .infoCard .address {
  align-items: center;
  gap: $ spacing-1;
  color: $ gray-600;
  margin-bottom: $ spacing-3;
  font-size: .875rem;
  display: flex;
}

.dark :is(.detailsContainer .infoCard .address) {
  color: $ gray-400;
}

.detailsContainer .infoCard .address svg {
  width: 1rem;
  height: 1rem;
}

.detailsContainer .infoCard .metadata {
  align-items: center;
  gap: $ spacing-4;
  margin-bottom: $ spacing-3;
  flex-wrap: wrap;
  display: flex;
}

.detailsContainer .infoCard .metadata .metaItem {
  align-items: center;
  gap: $ spacing-1;
  font-size: .875rem;
  display: flex;
}

.detailsContainer .infoCard .metadata .metaItem svg {
  width: 1rem;
  height: 1rem;
}

.detailsContainer .infoCard .metadata .metaItem.rating svg {
  fill: #fbbf24;
  color: #fbbf24;
}

.detailsContainer .infoCard .metadata .metaItem.distance svg {
  color: $ primary-blue;
}

.detailsContainer .infoCard .metadata .metaItem .count {
  color: $ gray-400;
}

.dark :is(.detailsContainer .infoCard .metadata .metaItem .count) {
  color: $ gray-500;
}

.detailsContainer .infoCard .separator {
  background: $ gray-200;
  height: 1px;
  margin: $ spacing-3 0;
}

.dark :is(.detailsContainer .infoCard .separator) {
  background: $ dark-border;
}

.detailsContainer .infoCard .priceList h3 {
  color: $ gray-900;
  margin-bottom: $ spacing-2;
  font-size: 1rem;
  font-weight: 500;
}

.dark :is(.detailsContainer .infoCard .priceList h3) {
  color: $ dark-text;
}

.detailsContainer .infoCard .priceList .priceGrid {
  gap: $ spacing-2;
  grid-template-columns: repeat(3, 1fr);
  font-size: .875rem;
  display: grid;
}

.detailsContainer .infoCard .priceList .priceGrid .priceBox {
  text-align: center;
  padding: $ spacing-2;
  background: $ gray-50;
  border-radius: $ radius-md;
}

.dark :is(.detailsContainer .infoCard .priceList .priceGrid .priceBox) {
  background: $ dark-bg;
}

.detailsContainer .infoCard .priceList .priceGrid .priceBox .priceLabel {
  color: $ gray-500;
  margin-bottom: $ spacing-1;
}

.dark :is(.detailsContainer .infoCard .priceList .priceGrid .priceBox .priceLabel) {
  color: $ gray-400;
}

.detailsContainer .infoCard .priceList .priceGrid .priceBox .priceValue {
  color: $ primary-blue;
  font-weight: 500;
}

.dark :is(.detailsContainer .infoCard .priceList .priceGrid .priceBox .priceValue) {
  color: $ primary-blue-light;
}

.detailsContainer .infoCard .operatingInfo {
  gap: $ spacing-2;
  flex-direction: column;
  display: flex;
}

.detailsContainer .infoCard .operatingInfo .infoRow {
  align-items: center;
  gap: $ spacing-2;
  color: $ gray-900;
  font-size: .875rem;
  display: flex;
}

.dark :is(.detailsContainer .infoCard .operatingInfo .infoRow) {
  color: $ dark-text-secondary;
}

.detailsContainer .infoCard .operatingInfo .infoRow svg {
  width: 1rem;
  height: 1rem;
  color: $ gray-500;
}

.detailsContainer .infoCard .paymentFeatures h3 {
  color: $ gray-900;
  margin-bottom: $ spacing-2;
  font-size: .875rem;
  font-weight: 500;
}

.dark :is(.detailsContainer .infoCard .paymentFeatures h3) {
  color: $ dark-text;
}

.detailsContainer .infoCard .paymentFeatures .badgeList {
  gap: $ spacing-2;
  flex-wrap: wrap;
  display: flex;
}

.detailsContainer .infoCard .paymentFeatures .badgeList .badge {
  padding: $ spacing-1$ spacing-2;
  border: 1px solid$ gray-300;
  border-radius: $ radius-sm;
  align-items: center;
  gap: $ spacing-1;
  font-size: .75rem;
  display: flex;
}

.dark :is(.detailsContainer .infoCard .paymentFeatures .badgeList .badge) {
  border-color: $ gray-600;
  color: $ dark-text-secondary;
}

.detailsContainer .infoCard .paymentFeatures .badgeList .badge svg {
  width: .75rem;
  height: .75rem;
}

.detailsContainer .infoCard .actionButtons {
  gap: $ spacing-2;
  grid-template-columns: repeat(2, 1fr);
  display: grid;
}

.detailsContainer .infoCard .actionButtons .primaryButton {
  background: $ primary-blue;
  color: $ white;
  justify-content: center;
  align-items: center;
  gap: $ spacing-2;
  display: flex;
}

.detailsContainer .infoCard .actionButtons .primaryButton:hover {
  background: $ primary-blue-dark;
}

.detailsContainer .infoCard .actionButtons .primaryButton svg {
  width: 1rem;
  height: 1rem;
}

.detailsContainer .infoCard .actionButtons .secondaryButton {
  border: 1px solid$ gray-300;
  color: $ gray-700;
  justify-content: center;
  align-items: center;
  gap: $ spacing-2;
  background: none;
  display: flex;
}

.dark :is(.detailsContainer .infoCard .actionButtons .secondaryButton) {
  border-color: $ dark-border;
  color: $ dark-text;
}

.detailsContainer .infoCard .actionButtons .secondaryButton:hover {
  background: $ gray-50;
}

.dark .detailsContainer .infoCard .actionButtons .secondaryButton:hover {
  background: $ dark-bg-secondary;
}

.detailsContainer .infoCard .actionButtons .secondaryButton svg {
  width: 1rem;
  height: 1rem;
}

.detailsContainer .infoCard .reportButton {
  border: 1px solid$ gray-300;
  width: 100%;
  color: $ gray-700;
  justify-content: center;
  align-items: center;
  gap: $ spacing-2;
  background: none;
  display: flex;
}

.dark :is(.detailsContainer .infoCard .reportButton) {
  border-color: $ dark-border;
  color: $ dark-text;
}

.detailsContainer .infoCard .reportButton:hover {
  background: $ gray-50;
}

.dark .detailsContainer .infoCard .reportButton:hover {
  background: $ dark-bg-secondary;
}

.detailsContainer .infoCard .reportButton svg {
  width: 1rem;
  height: 1rem;
}

.detailsContainer .reviewsSection {
  gap: $ spacing-3;
  flex-direction: column;
  display: flex;
}

.detailsContainer .reviewsSection h3 {
  color: $ gray-900;
  font-weight: 500;
}

.dark :is(.detailsContainer .reviewsSection h3) {
  color: $ dark-text;
}

.detailsContainer .reviewsSection .reviewCard {
  padding: $ spacing-4;
}

.detailsContainer .reviewsSection .reviewCard .reviewHeader {
  margin-bottom: $ spacing-2;
  align-items: flex-start;
}

.detailsContainer .reviewsSection .reviewCard .reviewHeader .reviewUser {
  align-items: center;
  gap: $ spacing-2;
  display: flex;
}

.detailsContainer .reviewsSection .reviewCard .reviewHeader .reviewUser .avatar {
  background: $ primary-blue;
  border-radius: $ radius-full;
  width: 2rem;
  height: 2rem;
  color: $ white;
  font-weight: 600;
}

.detailsContainer .reviewsSection .reviewCard .reviewHeader .reviewUser .userInfo .userName {
  color: $ gray-900;
  font-size: .875rem;
  font-weight: 500;
}

.dark :is(.detailsContainer .reviewsSection .reviewCard .reviewHeader .reviewUser .userInfo .userName) {
  color: $ dark-text;
}

.detailsContainer .reviewsSection .reviewCard .reviewHeader .reviewUser .userInfo .stars {
  align-items: center;
  gap: $ spacing-1;
  display: flex;
}

.detailsContainer .reviewsSection .reviewCard .reviewHeader .reviewUser .userInfo .stars svg {
  width: .75rem;
  height: .75rem;
}

.detailsContainer .reviewsSection .reviewCard .reviewHeader .reviewUser .userInfo .stars svg.filled {
  fill: #fbbf24;
  color: #fbbf24;
}

.detailsContainer .reviewsSection .reviewCard .reviewHeader .reviewUser .userInfo .stars svg.empty {
  color: $ gray-300;
}

.dark .detailsContainer .reviewsSection .reviewCard .reviewHeader .reviewUser .userInfo .stars svg.empty {
  color: $ gray-600;
}

.detailsContainer .reviewsSection .reviewCard .reviewHeader .date {
  color: $ gray-400;
  font-size: .75rem;
}

.detailsContainer .reviewsSection .reviewCard .reviewComment {
  color: $ gray-600;
  font-size: .875rem;
}

.dark :is(.detailsContainer .reviewsSection .reviewCard .reviewComment) {
  color: $ gray-400;
}

.emptyState {
  height: 100%;
  padding: $ spacing-8;
  text-align: center;
}

.emptyState .iconContainer {
  background: $ gray-100;
  border-radius: $ radius-full;
  width: 4rem;
  height: 4rem;
  margin-bottom: $ spacing-4;
}

.dark :is(.emptyState .iconContainer) {
  background: $ dark-bg-secondary;
}

.emptyState .iconContainer svg {
  width: 2rem;
  height: 2rem;
  color: $ gray-400;
}

.dark :is(.emptyState .iconContainer svg) {
  color: $ gray-500;
}

.emptyState .title {
  color: $ gray-900;
  margin-bottom: $ spacing-2;
  font-size: 1.125rem;
  font-weight: 500;
}

.dark :is(.emptyState .title) {
  color: $ dark-text;
}

.emptyState .description {
  color: $ gray-500;
  margin-bottom: $ spacing-6;
  max-width: 24rem;
  font-size: .875rem;
}

.dark :is(.emptyState .description) {
  color: $ gray-400;
}

.emptyState .retryButton {
  background: $ primary-blue;
  color: $ white;
}

.emptyState .retryButton:hover {
  background: $ primary-blue-dark;
}

.loadingContainer {
  height: 100%;
}

.loadingContainer .spinnerWrapper {
  position: relative;
}

.loadingContainer .spinnerWrapper .spinner {
  border-radius: $ radius-full;
  border: 4px solid$ gray-200;
  border-top-color: $ primary-blue;
  width: 4rem;
  height: 4rem;
  animation: 1s linear infinite spin;
}

.dark :is(.loadingContainer .spinnerWrapper .spinner) {
  border-color: $ dark-border;
  border-top-color: $ primary-blue;
}

.loadingContainer .spinnerWrapper .icon {
  width: 1.5rem;
  height: 1.5rem;
  color: $ primary-blue;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

.loadingContainer .text {
  margin-top: $ spacing-4;
  color: $ gray-600;
  font-size: .875rem;
}

.dark :is(.loadingContainer .text) {
  color: $ gray-400;
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

:root {
  --font-size: 16px;
  --background: #fff;
  --foreground: oklch(.145 0 0);
  --card: #fff;
  --card-foreground: oklch(.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(.145 0 0);
  --primary: #030213;
  --primary-foreground: oklch(1 0 0);
  --secondary: oklch(.95 .0058 264.53);
  --secondary-foreground: #030213;
  --muted: #ececf0;
  --muted-foreground: #717182;
  --accent: #e9ebef;
  --accent-foreground: #030213;
  --destructive: #d4183d;
  --destructive-foreground: #fff;
  --border: #0000001a;
  --input: transparent;
  --input-background: #f3f3f5;
  --switch-background: #cbced4;
  --font-weight-medium: 500;
  --font-weight-normal: 400;
  --ring: oklch(.708 0 0);
  --chart-1: oklch(.646 .222 41.116);
  --chart-2: oklch(.6 .118 184.704);
  --chart-3: oklch(.398 .07 227.392);
  --chart-4: oklch(.828 .189 84.429);
  --chart-5: oklch(.769 .188 70.08);
  --radius: .625rem;
  --sidebar: oklch(.985 0 0);
  --sidebar-foreground: oklch(.145 0 0);
  --sidebar-primary: #030213;
  --sidebar-primary-foreground: oklch(.985 0 0);
  --sidebar-accent: oklch(.97 0 0);
  --sidebar-accent-foreground: oklch(.205 0 0);
  --sidebar-border: oklch(.922 0 0);
  --sidebar-ring: oklch(.708 0 0);
}

.dark {
  --background: oklch(.145 0 0);
  --foreground: oklch(.985 0 0);
  --card: oklch(.145 0 0);
  --card-foreground: oklch(.985 0 0);
  --popover: oklch(.145 0 0);
  --popover-foreground: oklch(.985 0 0);
  --primary: oklch(.985 0 0);
  --primary-foreground: oklch(.205 0 0);
  --secondary: oklch(.269 0 0);
  --secondary-foreground: oklch(.985 0 0);
  --muted: oklch(.269 0 0);
  --muted-foreground: oklch(.708 0 0);
  --accent: oklch(.269 0 0);
  --accent-foreground: oklch(.985 0 0);
  --destructive: oklch(.396 .141 25.723);
  --destructive-foreground: oklch(.637 .237 25.331);
  --border: oklch(.269 0 0);
  --input: oklch(.269 0 0);
  --ring: oklch(.439 0 0);
  --font-weight-medium: 500;
  --font-weight-normal: 400;
  --chart-1: oklch(.488 .243 264.376);
  --chart-2: oklch(.696 .17 162.48);
  --chart-3: oklch(.769 .188 70.08);
  --chart-4: oklch(.627 .265 303.9);
  --chart-5: oklch(.645 .246 16.439);
  --sidebar: oklch(.205 0 0);
  --sidebar-foreground: oklch(.985 0 0);
  --sidebar-primary: oklch(.488 .243 264.376);
  --sidebar-primary-foreground: oklch(.985 0 0);
  --sidebar-accent: oklch(.269 0 0);
  --sidebar-accent-foreground: oklch(.985 0 0);
  --sidebar-border: oklch(.269 0 0);
  --sidebar-ring: oklch(.439 0 0);
}

html {
  font-size: var(--font-size);
}

@property --tw-translate-x {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}

@property --tw-translate-y {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}

@property --tw-translate-z {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}

@property --tw-rotate-x {
  syntax: "*";
  inherits: false;
  initial-value: rotateX(0);
}

@property --tw-rotate-y {
  syntax: "*";
  inherits: false;
  initial-value: rotateY(0);
}

@property --tw-rotate-z {
  syntax: "*";
  inherits: false;
  initial-value: rotateZ(0);
}

@property --tw-skew-x {
  syntax: "*";
  inherits: false;
  initial-value: skewX(0);
}

@property --tw-skew-y {
  syntax: "*";
  inherits: false;
  initial-value: skewY(0);
}

@property --tw-space-y-reverse {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}

@property --tw-border-style {
  syntax: "*";
  inherits: false;
  initial-value: solid;
}

@property --tw-gradient-position {
  syntax: "*";
  inherits: false
}

@property --tw-gradient-from {
  syntax: "<color>";
  inherits: false;
  initial-value: #0000;
}

@property --tw-gradient-via {
  syntax: "<color>";
  inherits: false;
  initial-value: #0000;
}

@property --tw-gradient-to {
  syntax: "<color>";
  inherits: false;
  initial-value: #0000;
}

@property --tw-gradient-stops {
  syntax: "*";
  inherits: false
}

@property --tw-gradient-via-stops {
  syntax: "*";
  inherits: false
}

@property --tw-gradient-from-position {
  syntax: "<length-percentage>";
  inherits: false;
  initial-value: 0%;
}

@property --tw-gradient-via-position {
  syntax: "<length-percentage>";
  inherits: false;
  initial-value: 50%;
}

@property --tw-gradient-to-position {
  syntax: "<length-percentage>";
  inherits: false;
  initial-value: 100%;
}

@property --tw-leading {
  syntax: "*";
  inherits: false
}

@property --tw-font-weight {
  syntax: "*";
  inherits: false
}

@property --tw-tracking {
  syntax: "*";
  inherits: false
}

@property --tw-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}

@property --tw-shadow-color {
  syntax: "*";
  inherits: false
}

@property --tw-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}

@property --tw-inset-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}

@property --tw-inset-shadow-color {
  syntax: "*";
  inherits: false
}

@property --tw-inset-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}

@property --tw-ring-color {
  syntax: "*";
  inherits: false
}

@property --tw-ring-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}

@property --tw-inset-ring-color {
  syntax: "*";
  inherits: false
}

@property --tw-inset-ring-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}

@property --tw-ring-inset {
  syntax: "*";
  inherits: false
}

@property --tw-ring-offset-width {
  syntax: "<length>";
  inherits: false;
  initial-value: 0;
}

@property --tw-ring-offset-color {
  syntax: "*";
  inherits: false;
  initial-value: #fff;
}

@property --tw-ring-offset-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}

@property --tw-outline-style {
  syntax: "*";
  inherits: false;
  initial-value: solid;
}

@property --tw-blur {
  syntax: "*";
  inherits: false
}

@property --tw-brightness {
  syntax: "*";
  inherits: false
}

@property --tw-contrast {
  syntax: "*";
  inherits: false
}

@property --tw-grayscale {
  syntax: "*";
  inherits: false
}

@property --tw-hue-rotate {
  syntax: "*";
  inherits: false
}

@property --tw-invert {
  syntax: "*";
  inherits: false
}

@property --tw-opacity {
  syntax: "*";
  inherits: false
}

@property --tw-saturate {
  syntax: "*";
  inherits: false
}

@property --tw-sepia {
  syntax: "*";
  inherits: false
}

@property --tw-drop-shadow {
  syntax: "*";
  inherits: false
}

@property --tw-drop-shadow-color {
  syntax: "*";
  inherits: false
}

@property --tw-drop-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}

@property --tw-drop-shadow-size {
  syntax: "*";
  inherits: false
}

@property --tw-duration {
  syntax: "*";
  inherits: false
}

@property --tw-ease {
  syntax: "*";
  inherits: false
}

@property --tw-scale-x {
  syntax: "*";
  inherits: false;
  initial-value: 1;
}

@property --tw-scale-y {
  syntax: "*";
  inherits: false;
  initial-value: 1;
}

@property --tw-scale-z {
  syntax: "*";
  inherits: false;
  initial-value: 1;
}

@keyframes enter {
  from {
    opacity: var(--tw-enter-opacity, 1);
    transform: translate3d(var(--tw-enter-translate-x, 0), var(--tw-enter-translate-y, 0), 0) scale3d(var(--tw-enter-scale, 1), var(--tw-enter-scale, 1), var(--tw-enter-scale, 1)) rotate(var(--tw-enter-rotate, 0));
  }
}

@keyframes exit {
  to {
    opacity: var(--tw-exit-opacity, 1);
    transform: translate3d(var(--tw-exit-translate-x, 0), var(--tw-exit-translate-y, 0), 0) scale3d(var(--tw-exit-scale, 1), var(--tw-exit-scale, 1), var(--tw-exit-scale, 1)) rotate(var(--tw-exit-rotate, 0));
  }
}
